{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["../src/FormikContext.tsx","../src/utils.ts","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/withFormik.tsx","../src/connect.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx","../src/FastField.tsx","/turbopack/[project]/node_modules/formik/dist/formik.esm.js"],"sourcesContent":["import * as React from 'react';\nimport { FormikContextType } from './types';\nimport invariant from 'tiny-warning';\n\nexport const FormikContext = React.createContext<FormikContextType<any>>(\n  undefined as any\n);\nFormikContext.displayName = 'FormikContext';\n\nexport const FormikProvider = FormikContext.Provider;\nexport const FormikConsumer = FormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  const formik = React.useContext<FormikContextType<Values>>(FormikContext);\n\n  invariant(\n    !!formik,\n    `Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.`\n  );\n\n  return formik;\n}\n","import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the value an empty array? */\nexport const isEmptyArray = (value?: any) =>\n  Array.isArray(value) && value.length === 0;\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): obj is Object =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n\n  // check if path is not in the end\n  if (p !== path.length && !obj) {\n    return def;\n  }\n\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash/isPlainObject';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport invariant from 'tiny-warning';\nimport { FieldConfig } from './Field';\nimport { FormikProvider } from './FormikContext';\nimport {\n  FieldHelperProps,\n  FieldInputProps,\n  FieldMetaProps,\n  FormikConfig,\n  FormikErrors,\n  FormikHandlers,\n  FormikHelpers,\n  FormikProps,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n} from './types';\nimport {\n  getActiveElement,\n  getIn,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  isPromise,\n  isString,\n  setIn,\n  setNestedObjectValues,\n} from './utils';\n\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | {\n      type: 'SET_FORMIK_STATE';\n      payload: (s: FormikState<Values>) => FormikState<Values>;\n    }\n  | {\n      type: 'RESET_FORM';\n      payload: FormikState<Values>;\n    };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n      return { ...state, ...msg.payload };\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<unknown> = {};\nconst emptyTouched: FormikTouched<unknown> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\n\nexport function useFormik<Values extends FormikValues = FormikValues>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  validateOnMount = false,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = {\n    validateOnChange,\n    validateOnBlur,\n    validateOnMount,\n    onSubmit,\n    ...rest,\n  };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>({});\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const [, setIteration] = React.useState(0);\n  const stateRef = React.useRef<FormikState<Values>>({\n    values: props.initialValues,\n    errors: props.initialErrors || emptyErrors,\n    touched: props.initialTouched || emptyTouched,\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const state = stateRef.current;\n\n  const dispatch = React.useCallback((action: FormikMessage<Values>) => {\n    const prev = stateRef.current;\n\n    stateRef.current = formikReducer(prev, action);\n\n    // force rerender\n    if (prev !== stateRef.current) setIteration(x => x + 1);\n  }, []);\n\n  const runValidateHandler = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      return new Promise((resolve, reject) => {\n        const maybePromisedErrors = (props.validate as any)(values, field);\n        if (maybePromisedErrors == null) {\n          // use loose null check here on purpose\n          resolve(emptyErrors);\n        } else if (isPromise(maybePromisedErrors)) {\n          (maybePromisedErrors as Promise<any>).then(\n            errors => {\n              resolve(errors || emptyErrors);\n            },\n            actualException => {\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validate />`,\n                  actualException\n                );\n              }\n\n              reject(actualException);\n            }\n          );\n        } else {\n          resolve(maybePromisedErrors);\n        }\n      });\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      const validationSchema = props.validationSchema;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      const promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      return new Promise((resolve, reject) => {\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            // Yup will throw a validation error if validation fails. We catch those and\n            // resolve them into Formik errors. We can sniff if something is a Yup error\n            // by checking error.name.\n            // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n            if (err.name === 'ValidationError') {\n              resolve(yupToFormErrors(err));\n            } else {\n              // We throw any other errors\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validationSchema />`,\n                  err\n                );\n              }\n\n              reject(err);\n            }\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string): Promise<string> => {\n      return new Promise(resolve =>\n        resolve(fieldRegistry.current[field].validate(value) as string)\n      );\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations: Promise<string>[] =\n        fieldKeysWithValidation.length > 0\n          ? fieldKeysWithValidation.map(f =>\n              runSingleFieldLevelValidation(f, getIn(values, f))\n            )\n          : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n      return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n        fieldErrorsList.reduce((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {})\n      );\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      });\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runAllValidations(values).then(combinedErrors => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n        }\n        return combinedErrors;\n      });\n    }\n  );\n\n  React.useEffect(() => {\n    if (\n      validateOnMount &&\n      isMounted.current === true &&\n      isEqual(initialValues.current, props.initialValues)\n    ) {\n      validateFormWithHighPriority(initialValues.current);\n    }\n  }, [validateOnMount, validateFormWithHighPriority]);\n\n  const resetForm = React.useCallback(\n    (nextState?: Partial<FormikState<Values>>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      const dispatchFn = () => {\n        dispatch({\n          type: 'RESET_FORM',\n          payload: {\n            isSubmitting: !!nextState && !!nextState.isSubmitting,\n            errors,\n            touched,\n            status,\n            values,\n            isValidating: !!nextState && !!nextState.isValidating,\n            submitCount:\n              !!nextState &&\n              !!nextState.submitCount &&\n              typeof nextState.submitCount === 'number'\n                ? nextState.submitCount\n                : 0,\n          },\n        });\n      };\n\n      if (props.onReset) {\n        const maybePromisedOnReset = (props.onReset as any)(\n          state.values,\n          imperativeMethods\n        );\n\n        if (isPromise(maybePromisedOnReset)) {\n          (maybePromisedOnReset as Promise<any>).then(dispatchFn);\n        } else {\n          dispatchFn();\n        }\n      } else {\n        dispatchFn();\n      }\n    },\n    [props.initialErrors, props.initialStatus, props.initialTouched, props.onReset]\n  );\n\n  React.useEffect(() => {\n    if (\n      isMounted.current === true &&\n      !isEqual(initialValues.current, props.initialValues)\n    ) {\n      if (enableReinitialize) {\n        initialValues.current = props.initialValues;\n        resetForm();\n        if (validateOnMount) {\n          validateFormWithHighPriority(initialValues.current);\n        }\n      }\n    }\n  }, [\n    enableReinitialize,\n    props.initialValues,\n    resetForm,\n    validateOnMount,\n    validateFormWithHighPriority,\n  ]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialErrors.current, props.initialErrors)\n    ) {\n      initialErrors.current = props.initialErrors || emptyErrors;\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: props.initialErrors || emptyErrors,\n      });\n    }\n  }, [enableReinitialize, props.initialErrors]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialTouched.current, props.initialTouched)\n    ) {\n      initialTouched.current = props.initialTouched || emptyTouched;\n      dispatch({\n        type: 'SET_TOUCHED',\n        payload: props.initialTouched || emptyTouched,\n      });\n    }\n  }, [enableReinitialize, props.initialTouched]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialStatus.current, props.initialStatus)\n    ) {\n      initialStatus.current = props.initialStatus;\n      dispatch({\n        type: 'SET_STATUS',\n        payload: props.initialStatus,\n      });\n    }\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\n\n  const validateField = useEventCallback((name: string) => {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (\n      fieldRegistry.current[name] &&\n      isFunction(fieldRegistry.current[name].validate)\n    ) {\n      const value = getIn(state.values, name);\n      const maybePromise = fieldRegistry.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else if (props.validationSchema) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runValidationSchema(state.values, name)\n        .then((x: any) => x)\n        .then((error: any) => {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: { field: name, value: getIn(error, name) },\n          });\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        });\n    }\n\n    return Promise.resolve();\n  });\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback(\n    (touched: FormikTouched<Values>, shouldValidate?: boolean) => {\n      dispatch({ type: 'SET_TOUCHED', payload: touched });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback(\n    (values: React.SetStateAction<Values>, shouldValidate?: boolean) => {\n      const resolvedValues = isFunction(values) ? values(state.values) : values;\n\n      dispatch({ type: 'SET_VALUES', payload: resolvedValues });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(resolvedValues)\n        : Promise.resolve();\n    }\n  );\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    }\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as any).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const target = eventOrTextValue.target\n          ? (eventOrTextValue as React.ChangeEvent<any>).target\n          : (eventOrTextValue as React.ChangeEvent<any>).currentTarget;\n\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n          options,\n          multiple,\n        } = target;\n\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && __DEV__) {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) // checkboxes\n          ? getValueForCheckbox(getIn(state.values, field!), checked, value)\n          : options && multiple // <select multiple>\n          ? getSelectedValues(options)\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue, state.values]\n  );\n\n  const handleChange = useEventCallback<FormikHandlers['handleChange']>(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    }\n  );\n\n  const setFieldTouched = useEventCallback(\n    (field: string, touched: boolean = true, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && __DEV__) {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = useEventCallback<FormikHandlers['handleBlur']>(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    }\n  );\n\n  const setFormikState = React.useCallback(\n    (\n      stateOrCb:\n        | FormikState<Values>\n        | ((state: FormikState<Values>) => FormikState<Values>)\n    ): void => {\n      if (isFunction(stateOrCb)) {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n      } else {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: () => stateOrCb });\n      }\n    },\n    []\n  );\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateFormWithHighPriority().then(\n      (combinedErrors: FormikErrors<Values>) => {\n        // In case an error was thrown and passed to the resolved Promise,\n        // `combinedErrors` can be an instance of an Error. We need to check\n        // that and abort the submit.\n        // If we don't do that, calling `Object.keys(new Error())` yields an\n        // empty array, which causes the validation to pass and the form\n        // to be submitted.\n\n        const isInstanceOfError = combinedErrors instanceof Error;\n        const isActuallyValid =\n          !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n        if (isActuallyValid) {\n          // Proceed with submit...\n          //\n          // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n          // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n          // This would be fine in simple cases, but make it impossible to disable submit\n          // buttons where people use callbacks or promises as side effects (which is basically\n          // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n          //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n          // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n          // cleanup of isSubmitting on behalf of the consumer.\n          let promiseOrUndefined;\n          try {\n            promiseOrUndefined = executeSubmit();\n            // Bail if it's sync, consumer is responsible for cleaning up\n            // via setSubmitting(false)\n            if (promiseOrUndefined === undefined) {\n              return;\n            }\n          } catch (error) {\n            throw error;\n          }\n\n          return Promise.resolve(promiseOrUndefined)\n            .then(result => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_SUCCESS' });\n              }\n              return result;\n            })\n            .catch(_errors => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_FAILURE' });\n                // This is a legit error rejected by the onSubmit fn\n                // so we don't want to break the promise chain\n                throw _errors;\n              }\n            });\n        } else if (!!isMounted.current) {\n          // ^^^ Make sure Formik is still mounted before updating state\n          dispatch({ type: 'SUBMIT_FAILURE' });\n          // throw combinedErrors;\n          if (isInstanceOfError) {\n            throw combinedErrors;\n          }\n        }\n        return;\n      }\n    );\n  });\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (__DEV__ && typeof document !== 'undefined') {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      submitForm().catch(reason => {\n        console.warn(\n          `Warning: An unhandled error was caught from submitForm()`,\n          reason\n        );\n      });\n    }\n  );\n\n  const imperativeMethods: FormikHelpers<Values> = {\n    resetForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n    submitForm,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  });\n\n  const handleReset = useEventCallback(e => {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    resetForm();\n  });\n\n  const getFieldMeta = React.useCallback(\n    (name: string): FieldMetaProps<any> => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldHelpers = React.useCallback(\n    (name: string): FieldHelperProps<any> => {\n      return {\n        setValue: (value: any, shouldValidate?: boolean) =>\n          setFieldValue(name, value, shouldValidate),\n        setTouched: (value: boolean, shouldValidate?: boolean) =>\n          setFieldTouched(name, value, shouldValidate),\n        setError: (value: any) => setFieldError(name, value),\n      };\n    },\n    [setFieldValue, setFieldTouched, setFieldError]\n  );\n\n  const getFieldProps = React.useCallback(\n    (nameOrOptions: string | FieldConfig<any>): FieldInputProps<any> => {\n      const isAnObject = isObject(nameOrOptions);\n      const name = isAnObject\n        ? (nameOrOptions as FieldConfig<any>).name\n        : nameOrOptions;\n      const valueState = getIn(state.values, name);\n\n      const field: FieldInputProps<any> = {\n        name,\n        value: valueState,\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n      if (isAnObject) {\n        const {\n          type,\n          value: valueProp, // value is special for checkboxes\n          as: is,\n          multiple,\n        } = nameOrOptions as FieldConfig<any>;\n\n        if (type === 'checkbox') {\n          if (valueProp === undefined) {\n            field.checked = !!valueState;\n          } else {\n            field.checked = !!(\n              Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n            );\n            field.value = valueProp;\n          }\n        } else if (type === 'radio') {\n          field.checked = valueState === valueProp;\n          field.value = valueProp;\n        } else if (is === 'select' && multiple) {\n          field.value = field.value || [];\n          field.multiple = true;\n        }\n      }\n      return field;\n    },\n    [handleBlur, handleChange, state.values]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    validateOnBlur,\n    validateOnChange,\n    validateOnMount,\n  };\n\n  return ctx;\n}\n\nexport function Formik<\n  Values extends FormikValues = FormikValues,\n  ExtraProps = {}\n>(props: FormikConfig<Values> & ExtraProps) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render, innerRef } = props;\n\n  // This allows folks to pass a ref to <Formik />\n  React.useImperativeHandle(innerRef, () => formikbag);\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !props.render,\n        `<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>`\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n    for (let err of yupError.inner) {\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context?: any\n): Promise<Partial<T>> {\n  const normalizedValues: FormikValues = prepareDataForValidation(values);\n\n  return schema[sync ? 'validateSync' : 'validate'](normalizedValues, {\n    abortEarly: false,\n    context: context || normalizedValues,\n  });\n}\n\n/**\n * Recursively prepare values.\n */\nexport function prepareDataForValidation<T extends FormikValues>(\n  values: T\n): FormikValues {\n  let data: FormikValues = Array.isArray(values) ? [] : {};\n  for (let k in values) {\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\n      const key = String(k);\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map((value: any) => {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n  return data;\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function merge(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\n/** Return multi select values based on an array of options */\nfunction getSelectedValues(options: any[]) {\n  return Array.from(options)\n    .filter(el => el.selected)\n    .map(el => el.value);\n}\n\n/** Return the next value for a checkbox */\nfunction getValueForCheckbox(\n  currentValue: string | any[],\n  checked: boolean,\n  valueProp: any\n) {\n  // If the current value was a boolean, return a boolean\n  if (typeof currentValue === 'boolean') {\n    return Boolean(checked);\n  }\n\n  // If the currentValue was not a boolean we want to return an array\n  let currentArrayOfValues = [];\n  let isValueInArray = false;\n  let index = -1;\n\n  if (!Array.isArray(currentValue)) {\n    // eslint-disable-next-line eqeqeq\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\n      return Boolean(checked);\n    }\n  } else {\n    // If the current value is already an array, use it\n    currentArrayOfValues = currentValue;\n    index = currentValue.indexOf(valueProp);\n    isValueInArray = index >= 0;\n  }\n\n  // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\n  if (checked && valueProp && !isValueInArray) {\n    return currentArrayOfValues.concat(valueProp);\n  }\n\n  // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\n  if (!isValueInArray) {\n    return currentArrayOfValues;\n  }\n\n  // If the checkbox was unchecked and the value is in the array, remove the value and return the array\n  return currentArrayOfValues\n    .slice(0, index)\n    .concat(currentArrayOfValues.slice(index + 1));\n}\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref: any = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  return React.useCallback(\n    (...args: any[]) => ref.current.apply(void 0, args),\n    []\n  ) as T;\n}\n","import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FieldValidator,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren, isObject } from './utils';\nimport invariant from 'tiny-warning';\n\nexport interface FieldProps<V = any, FormValues = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<FormValues>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig<V = any> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n  | string\n  | React.ComponentType<FieldProps<V>>\n  | React.ComponentType\n  | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n  | React.ComponentType<FieldProps<V>['field']>\n  | string\n  | React.ComponentType\n  | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   * @deprecated\n   */\n  render?: (props: FieldProps<V>) => React.ReactNode;\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<V>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: FieldValidator;\n\n  /**\n   * Used for 'select' and related input types.\n   */\n  multiple?: boolean;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = { className?: string; } & GenericFieldHTMLAttributes &\n  FieldConfig<T> &\n  T & {\n    name: string,\n  };\n\nexport type FieldHookConfig<T> = GenericFieldHTMLAttributes & FieldConfig<T>;\n\nexport function useField<Val = any>(\n  propsOrFieldName: string | FieldHookConfig<Val>\n): [FieldInputProps<Val>, FieldMetaProps<Val>, FieldHelperProps<Val>] {\n  const formik = useFormikContext();\n  const {\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    registerField,\n    unregisterField,\n  } = formik;\n\n  const isAnObject = isObject(propsOrFieldName);\n\n  // Normalize propsOrFieldName to FieldHookConfig<Val>\n  const props: FieldHookConfig<Val> = isAnObject\n    ? (propsOrFieldName as FieldHookConfig<Val>)\n    : { name: propsOrFieldName as string };\n\n  const { name: fieldName, validate: validateFn } = props;\n\n  React.useEffect(() => {\n    if (fieldName) {\n      registerField(fieldName, {\n        validate: validateFn,\n      });\n    }\n    return () => {\n      if (fieldName) {\n        unregisterField(fieldName);\n      }\n    };\n  }, [registerField, unregisterField, fieldName, validateFn]);\n\n  if (__DEV__) {\n    invariant(\n      formik,\n      'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n    );\n  }\n\n  invariant(\n    fieldName,\n    'Invalid field name. Either pass `useField` a string or an object containing a `name` key.'\n  );\n\n  const fieldHelpers = React.useMemo(() => getFieldHelpers(fieldName), [\n    getFieldHelpers,\n    fieldName,\n  ]);\n\n  return [getFieldProps(props), getFieldMeta(fieldName), fieldHelpers];\n}\n\nexport function Field({\n  validate,\n  name,\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  className,\n  ...props\n}: FieldAttributes<any>) {\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n\n    ...formik\n  } = useFormikContext();\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !render,\n        `<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"${name}\" render={({field, form}) => ...} /> with <Field name=\"${name}\">{({field, form, meta}) => ...}</Field>`\n      );\n\n      invariant(\n        !(is && children && isFunction(children)),\n        'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n      );\n\n      invariant(\n        !(component && children && isFunction(children)),\n        'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n      );\n\n      invariant(\n        !(render && children && !isEmptyChildren(children)),\n        'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  // Register field and field-level validation with parent <Formik>\n  const { registerField, unregisterField } = formik;\n  React.useEffect(() => {\n    registerField(name, {\n      validate: validate,\n    });\n    return () => {\n      unregisterField(name);\n    };\n  }, [registerField, unregisterField, name, validate]);\n  const field = formik.getFieldProps({ name, ...props });\n  const meta = formik.getFieldMeta(name);\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    return render({ ...legacyBag, meta });\n  }\n\n  if (isFunction(children)) {\n    return children({ ...legacyBag, meta });\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest, className },\n        children\n      );\n    }\n    // We don't pass `meta` for backwards compat\n    return React.createElement(\n      component,\n      { field, form: formik, ...props, className },\n      children\n    );\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    const { innerRef, ...rest } = props;\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest, className },\n      children\n    );\n  }\n\n  return React.createElement(asElement, { ...field, ...props, className }, children);\n}\n","import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\ntype FormProps = React.ComponentPropsWithoutRef<'form'>;\n\n// @todo tests\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props: FormikFormProps, ref) => {\n    // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n    // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n    const { action, ...rest } = props;\n    const _action = action ?? '#';\n    const { handleReset, handleSubmit } = useFormikContext();\n    return (\n      <form\n        onSubmit={handleSubmit}\n        ref={ref}\n        onReset={handleReset}\n        action={_action}\n        {...rest}\n      />\n    );\n  }\n);\n\nForm.displayName = 'Form';\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikHelpers,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n  FormikTouched,\n  FormikErrors,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik helpers + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikHelpers<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig<Props> {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form status\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * Map props to the form touched state\n   */\n  mapPropsToTouched?: (props: Props) => FormikTouched<Values>;\n\n  /**\n   * Map props to the form errors state\n   */\n  mapPropsToErrors?: (props: Props) => FormikErrors<Values>;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.FunctionComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps extends object,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        // @todo TypeScript fix\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikHelpers<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            initialErrors={\n              config.mapPropsToErrors && config.mapPropsToErrors(this.props)\n            }\n            initialTouched={\n              config.mapPropsToTouched && config.mapPropsToTouched(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            children={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n","import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContextType } from './types';\nimport { FormikConsumer } from './FormikContext';\nimport invariant from 'tiny-warning';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContextType<Values> }>\n) {\n  const C: React.FC<OuterProps> = props => (\n    <FormikConsumer>\n      {formik => {\n        invariant(\n          !!formik,\n          `Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: ${Comp.name}`\n        );\n        return <Comp {...props} formik={formik} />;\n      }}\n    </FormikConsumer>\n  );\n\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.FC<OuterProps> & {\n    WrappedComponent: typeof Comp;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  );\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikProps,\n  FormikState,\n  SharedRenderProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyArray,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  setIn,\n} from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers<T extends any[] = any[]> {\n  /** Imperatively add a value to the end of an array */\n  push<X = T[number]>(obj: X): void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush<X = T[number]>(obj: X): () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert<X = T[number]>(index: number, value: X): void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert<X = T[number]>(index: number, value: X): () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace<X = T[number]>(index: number, value: X): void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace<X = T[number]>(index: number, value: X): () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift<X = T[number]>(value: X): number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift<X = T[number]>(value: X): () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<X = T[number]>(index: number): X | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<X = T[number]>(): X | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = <T,>(array: T[], from: number, to: number) => {\n  const copy = copyArrayLike(array);\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = <T,>(\n  arrayLike: ArrayLike<T>,\n  indexA: number,\n  indexB: number\n) => {\n  const copy = copyArrayLike(arrayLike);\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = <T,>(\n  arrayLike: ArrayLike<T>,\n  index: number,\n  value: T\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = <T,>(\n  arrayLike: ArrayLike<T>,\n  index: number,\n  value: T\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nconst copyArrayLike = (arrayLike: ArrayLike<any>) => {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [...arrayLike];\n  } else {\n    const maxIndex = Object.keys(arrayLike)\n      .map(key => parseInt(key))\n      .reduce((max, el) => (el > max ? el : max), 0);\n    return Array.from({ ...arrayLike, length: maxIndex + 1 });\n  }\n};\n\nconst createAlterationHandler = (\n  alteration: boolean | Function,\n  defaultFunction: Function\n) => {\n  const fn = typeof alteration === 'function' ? alteration : defaultFunction;\n\n  return (data: any | any[]) => {\n    if (Array.isArray(data) || isObject(data)) {\n      const clone = copyArrayLike(data);\n      return fn(clone);\n    }\n\n    // This can be assumed to be a primitive, which\n    // is a case for top level validation errors\n    return data;\n  };\n};\n\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContextType<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContextType<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  componentDidUpdate(\n    prevProps: FieldArrayConfig & { formik: FormikContextType<Values> }\n  ) {\n    if (\n      this.props.validateOnChange &&\n      this.props.formik.validateOnChange &&\n      !isEqual(\n        getIn(prevProps.formik.values, prevProps.name),\n        getIn(this.props.formik.values, this.props.name)\n      )\n    ) {\n      this.props.formik.validateForm(this.props.formik.values);\n    }\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n\n      formik: { setFormikState },\n    } = this.props;\n\n    setFormikState((prevState: FormikState<any>) => {\n      let updateErrors = createAlterationHandler(alterErrors, fn);\n      let updateTouched = createAlterationHandler(alterTouched, fn);\n\n      // values fn should be executed before updateErrors and updateTouched,\n      // otherwise it causes an error with unshift.\n      let values = setIn(\n        prevState.values,\n        name,\n        fn(getIn(prevState.values, name))\n      );\n\n      let fieldError = alterErrors\n        ? updateErrors(getIn(prevState.errors, name))\n        : undefined;\n      let fieldTouched = alterTouched\n        ? updateTouched(getIn(prevState.touched, name))\n        : undefined;\n\n      if (isEmptyArray(fieldError)) {\n        fieldError = undefined;\n      }\n      if (isEmptyArray(fieldTouched)) {\n        fieldTouched = undefined;\n      }\n\n      return {\n        ...prevState,\n        values,\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fieldError)\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fieldTouched)\n          : prevState.touched,\n      };\n    });\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (arrayLike: ArrayLike<any>) => [\n        ...copyArrayLike(arrayLike),\n        cloneDeep(value),\n      ],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n\n        length = arr.length;\n\n        return arr;\n      },\n      (array: any[]) => {\n        return array ? [null, ...array] : [null];\n      },\n      (array: any[]) => {\n        return array ? [null, ...array] : [null];\n      }\n    );\n\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? copyArrayLike(array) : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        // if the array only includes undefined values we have to return an empty array\n        return isFunction(copy.every)\n          ? copy.every(v => v === undefined)\n            ? []\n            : copy\n          : copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array.slice();\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n      ? (render as any)(props)\n      : children // children come last, always called\n      ? typeof children === 'function'\n        ? (children as any)(props)\n        : !isEmptyChildren(children)\n        ? React.Children.only(children)\n        : null\n      : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  id?: string;\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: (errorMessage: string) => React.ReactNode;\n  render?: (errorMessage: string) => React.ReactNode;\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContextType<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContextType<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render)\n          ? render(error)\n          : null\n        : children\n        ? isFunction(children)\n          ? children(error)\n          : null\n        : component\n        ? React.createElement(component, rest as any, error)\n        : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContextType<any> }\n>(ErrorMessageImpl);\n","import * as React from 'react';\n\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContextType,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport invariant from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\nimport { FieldConfig } from './Field';\nimport { connect } from './connect';\n\ntype $FixMe = any;\n\nexport interface FastFieldProps<V = any> {\n  field: FieldInputProps<V>;\n  meta: FieldMetaProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport type FastFieldConfig<T> = FieldConfig & {\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate,\n    });\n  }\n\n  componentDidUpdate(prevProps: FastFieldAttributes<Props>) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = formik.getFieldProps({ name, ...props });\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return React.createElement(\n          component,\n          { ref: innerRef, ...field, ...(rest as $FixMe) },\n          children\n        );\n      }\n      // We don't pass `meta` for backwards compat\n      return React.createElement(\n        component as React.ComponentClass<$FixMe>,\n        { field, form: formik, ...props },\n        children\n      );\n    }\n\n    // default to input here so we can check for both `as` and `children` above\n    const asElement = is || 'input';\n\n    if (typeof asElement === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        asElement,\n        { ref: innerRef, ...field, ...(rest as $FixMe) },\n        children\n      );\n    }\n\n    return React.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n",null],"names":["FormikContext","React","undefined","displayName","FormikProvider","Provider","FormikConsumer","Consumer","useFormikContext","formik","invariant","isEmptyArray","value","Array","isArray","length","isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","Object","prototype","toString","call","isNaN","isEmptyChildren","children","count","isPromise","then","isInputEvent","target","getActiveElement","doc","document","activeElement","body","e","getIn","key","def","p","path","toPath","setIn","res","clone","resVal","i","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","keys","k","val","get","set","formikReducer","state","msg","type","values","payload","touched","isEqual","errors","status","isSubmitting","isValidating","field","submitCount","emptyErrors","emptyTouched","useFormik","validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit","rest","props","initialValues","initialErrors","initialTouched","initialStatus","isMounted","fieldRegistry","current","setIteration","stateRef","dispatch","action","prev","x","runValidateHandler","Promise","resolve","reject","maybePromisedErrors","validate","actualException","console","warn","runValidationSchema","validationSchema","schema","promise","validateAt","validateYupSchema","err","name","yupToFormErrors","runSingleFieldLevelValidation","runFieldLevelValidations","fieldKeysWithValidation","filter","f","fieldValidations","map","all","fieldErrorsList","reduce","curr","index","runAllValidations","fieldErrors","schemaErrors","validateErrors","combinedErrors","deepmerge","arrayMerge","validateFormWithHighPriority","useEventCallback","resetForm","nextState","dispatchFn","onReset","maybePromisedOnReset","imperativeMethods","validateField","maybePromise","error","registerField","unregisterField","setTouched","shouldValidate","willValidate","setErrors","setValues","resolvedValues","setFieldError","setFieldValue","executeChange","eventOrTextValue","maybePath","parsed","persist","currentTarget","id","checked","outerHTML","options","multiple","warnAboutMissingIdentifier","htmlContent","documentationAnchorLink","handlerName","test","parseFloat","getValueForCheckbox","getSelectedValues","handleChange","eventOrPath","event","setFieldTouched","executeBlur","handleBlur","eventOrString","setFormikState","stateOrCb","setStatus","setSubmitting","submitForm","isInstanceOfError","Error","isActuallyValid","promiseOrUndefined","executeSubmit","result","_errors","handleSubmit","preventDefault","stopPropagation","HTMLButtonElement","attributes","getNamedItem","reason","validateForm","handleReset","getFieldMeta","initialValue","initialError","getFieldHelpers","setValue","setError","getFieldProps","nameOrOptions","isAnObject","valueState","onChange","onBlur","valueProp","is","as","indexOf","dirty","isValid","ctx","Formik","formikbag","component","render","innerRef","only","yupError","inner","message","sync","context","normalizedValues","prepareDataForValidation","abortEarly","data","hasOwnProperty","isPlainObject","source","destination","forEach","merge","cloneRequested","shouldClone","isMergeableObject","push","from","el","selected","currentValue","Boolean","currentArrayOfValues","isValueInArray","concat","useIsomorphicLayoutEffect","window","createElement","fn","ref","args","apply","useField","propsOrFieldName","fieldName","validateFn","fieldHelpers","Field","className","_validate","meta","legacyBag","form","asElement","Form","_action","withFormik","mapPropsToValues","vanillaProps","config","createFormik","Component","componentDisplayName","constructor","C","actions","renderFormComponent","formikProps","mapPropsToStatus","mapPropsToErrors","mapPropsToTouched","hoistNonReactStatics","connect","Comp","WrappedComponent","move","array","to","copy","copyArrayLike","splice","swap","arrayLike","indexA","indexB","a","insert","replace","maxIndex","parseInt","max","createAlterationHandler","alteration","defaultFunction","FieldArrayInner","updateArrayField","alterTouched","alterErrors","prevState","updateErrors","updateTouched","fieldError","fieldTouched","cloneDeep","handlePush","handleSwap","handleMove","handleInsert","handleReplace","unshift","arr","handleUnshift","handleRemove","remove","handlePop","pop","bind","componentDidUpdate","prevProps","every","v","tmp","arrayHelpers","restOfFormik","defaultProps","FieldArray","ErrorMessageImpl","shouldComponentUpdate","touch","ErrorMessage","FastFieldInner","shouldUpdate","componentDidMount","componentWillUnmount","bag","FastField"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIaA,gBAAa,WAAA,GAAGC,iOAC3BC;AAEFF,cAAcG,WAAd,GAA4B;IAEfC,iBAAiBJ,cAAcK,QAAAA;IAC/BC,iBAAiBN,cAAcO,QAAAA;SAE5BC;IACd,IAAMC,SAASR,8NAA4CD;IAE3D,CACE,CAAC,CAACS,SADJ,uCAAAC,6KAAS,OAAA,4JAAT,KAAA;IAKA,OAAOD;AACR;ACfD,0CAAA,GACA,IAAaE,eAAe,SAAfA,aAAgBC,KAAD;IAAA,OAC1BC,MAAMC,OAAN,CAAcF,UAAUA,MAAMG,MAAN,KAAiB;AADf;AAG5B,6CAAA,GACA,IAAaC,aAAa,SAAbA,WAAcC,GAAD;IAAA,OACxB,OAAOA,QAAQ;AADS;AAG1B,4CAAA,GACA,IAAaC,WAAW,SAAXA,SAAYD,GAAD;IAAA,OACtBA,QAAQ,QAAQ,OAAOA,QAAQ;AADT;AAGxB,6CAAA,GACA,IAAaE,YAAY,SAAZA,UAAaF,GAAD;IAAA,OACvBG,OAAOC,KAAKC,KAAL,CAAWC,OAAON,WAAWA;AADb;AAGzB,2CAAA,GACA,IAAaO,WAAW,SAAXA,SAAYP,GAAD;IAAA,OACtBQ,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BX,SAAS;AADlB;AAGxB,wCAAA,GACA,2CAAA;AACA,IAAaY,UAAQ,SAARA,OAASZ,GAAD;IAAA,OAAuBA,QAAQA;AAA/B;AAErB,6DAAA,GACA,IAAaa,kBAAkB,SAAlBA,gBAAmBC,QAAD;IAAA,OAC7B9B,4NAAe+B,KAAf,CAAqBD,cAAc;AADN;AAG/B,kDAAA,GACA,IAAaE,YAAY,SAAZA,UAAarB,KAAD;IAAA,OACvBM,SAASN,UAAUI,WAAWJ,MAAMsB,IAAP;AADN;AAGzB,kEAAA,GACA,IAAaC,eAAe,SAAfA,aAAgBvB,KAAD;IAAA,OAC1BA,SAASM,SAASN,UAAUM,SAASN,MAAMwB,MAAP;AADV;AAG5B;;;;;;;;;;IAWA,SAAgBC,iBAAiBC,GAAAA;IAC/BA,MAAMA,OAAG,CAAK,OAAOC,aAAa,cAAcA,WAAWrC,SAAlD;IACT,IAAI,OAAOoC,QAAQ,aAAa;QAC9B,OAAO;IACR;IACD,IAAI;QACF,OAAOA,IAAIE,aAAJ,IAAqBF,IAAIG,IAAhC;IACD,EAAC,OAAOC,GAAG;QACV,OAAOJ,IAAIG,IAAX;IACD;AACF;AAED;;IAGA,SAAgBE,MACd1B,GAAAA,EACA2B,GAAAA,EACAC,GAAAA,EACAC,CAAAA;QAAAA,MAAAA,KAAAA,GAAAA;QAAAA,IAAY;;IAEZ,IAAMC,OAAOC,kJAAOJ;IACpB,MAAO3B,OAAO6B,IAAIC,KAAKhC,MAAvB,CAA+B;QAC7BE,MAAMA,GAAG,CAAC8B,IAAI,CAACD,IAAN,CAAT;IACD,EAAA,kCAAA;IAGD,IAAIA,MAAMC,KAAKhC,MAAX,IAAqB,CAACE,KAAK;QAC7B,OAAO4B;IACR;IAED,OAAO5B,QAAQf,YAAY2C,MAAM5B;AAClC;AAED;;;;;;;;;;;;;;;;;;;;;;;IAwBA,SAAgBgC,MAAMhC,GAAAA,EAAU8B,IAAAA,EAAcnC,KAAAA;IAC5C,IAAIsC,MAAWC,iJAAMlC,MAArB,6CAAA;IACA,IAAImC,SAAcF;IAClB,IAAIG,IAAI;IACR,IAAIC,YAAYN,kJAAOD;IAEvB,MAAOM,IAAIC,UAAUvC,MAAV,GAAmB,GAAGsC,IAAK;QACpC,IAAME,cAAsBD,SAAS,CAACD,EAAtC;QACA,IAAIG,aAAkBb,MAAM1B,KAAKqC,UAAUG,KAAV,CAAgB,GAAGJ,IAAI;QAExD,IAAIG,cAAU,CAAKtC,SAASsC,eAAe3C,MAAMC,OAAN,CAAc0C,WAA3C,GAAyD;YACrEJ,SAASA,MAAM,CAACG,YAAP,GAAsBJ,iJAAMK;QACtC,OAAM;YACL,IAAME,WAAmBJ,SAAS,CAACD,IAAI,EAAvC;YACAD,SAASA,MAAM,CAACG,YAAP,GACPpC,UAAUuC,aAAanC,OAAOmC,aAAa,IAAI,EAA/C,GAAoD,CAAA;QACvD;IACF,EAAA,6DAAA;IAGD,IAAI,CAACL,MAAM,IAAIpC,MAAMmC,MAAjB,CAAA,CAAyBE,SAAS,CAACD,EAAnC,CAAA,KAA2CzC,OAAO;QACpD,OAAOK;IACR;IAED,IAAIL,UAAUV,WAAW;QACvB,OAAOkD,MAAM,CAACE,SAAS,CAACD,EAAX,CAAb;IACD,OAAM;QACLD,MAAM,CAACE,SAAS,CAACD,EAAX,CAAN,GAAuBzC;IACxB,EAAA,gEAAA;IAGD,2FAAA;IACA,IAAIyC,MAAM,KAAKzC,UAAUV,WAAW;QAClC,OAAOgD,GAAG,CAACI,SAAS,CAACD,EAAX,CAAV;IACD;IAED,OAAOH;AACR;AAED;;;;;;IAOA,SAAgBS,sBACdC,MAAAA,EACAhD,KAAAA,EACAiD,OAAAA,EACAC,QAAAA;QADAD,YAAAA,KAAAA,GAAAA;QAAAA,UAAe,IAAIE;;QACnBD,aAAAA,KAAAA,GAAAA;QAAAA,WAAgB,CAAA;;IAEhB,IAAA,IAAA,KAAA,GAAA,eAAcrC,OAAOuC,IAAP,CAAYJ,SAA1B,KAAA,aAAA,MAAA,EAAA,KAAmC;QAA9B,IAAIK,IAAC,YAAA,CAAA,GAAL;QACH,IAAMC,MAAMN,MAAM,CAACK,EAAnB;QACA,IAAI/C,SAASgD,MAAM;YACjB,IAAI,CAACL,QAAQM,GAAR,CAAYD,MAAM;gBACrBL,QAAQO,GAAR,CAAYF,KAAK,OADI,kEAAA;gBAGrB,+DAAA;gBACA,2EAAA;gBACAJ,QAAQ,CAACG,EAAT,GAAcpD,MAAMC,OAAN,CAAcoD,OAAO,EAArB,GAA0B,CAAA;gBACxCP,sBAAsBO,KAAKtD,OAAOiD,SAASC,QAAQ,CAACG,EAA/B;YACtB;QACF,OAAM;YACLH,QAAQ,CAACG,EAAT,GAAcrD;QACf;IACF;IAED,OAAOkD;AACR;AC7HD,SAASO,cACPC,KADF,EAEEC,GAFF;IAIE,OAAQA,IAAIC,IAAZ;QACE,KAAK;YACH,OAAA,SAAA,CAAA,GAAYF,OAAZ;gBAAmBG,QAAQF,IAAIG,OAAAA;YAA/B;QACF,KAAK;YACH,OAAA,SAAA,CAAA,GAAYJ,OAAZ;gBAAmBK,SAASJ,IAAIG,OAAAA;YAAhC;QACF,KAAK;YACH,IAAIE,6JAAQN,MAAMO,MAAP,EAAeN,IAAIG,OAAnB,GAA6B;gBACtC,OAAOJ;YACR;YAED,OAAA,SAAA,CAAA,GAAYA,OAAZ;gBAAmBO,QAAQN,IAAIG,OAAAA;YAA/B;QACF,KAAK;YACH,OAAA,SAAA,CAAA,GAAYJ,OAAZ;gBAAmBQ,QAAQP,IAAIG,OAAAA;YAA/B;QACF,KAAK;YACH,OAAA,SAAA,CAAA,GAAYJ,OAAZ;gBAAmBS,cAAcR,IAAIG,OAAAA;YAArC;QACF,KAAK;YACH,OAAA,SAAA,CAAA,GAAYJ,OAAZ;gBAAmBU,cAAcT,IAAIG,OAAAA;YAArC;QACF,KAAK;YACH,OAAA,SAAA,CAAA,GACKJ,OADL;gBAEEG,QAAQxB,MAAMqB,MAAMG,MAAP,EAAeF,IAAIG,OAAJ,CAAYO,KAA3B,EAAkCV,IAAIG,OAAJ,CAAY9D,KAA9C;YAFf;QAIF,KAAK;YACH,OAAA,SAAA,CAAA,GACK0D,OADL;gBAEEK,SAAS1B,MAAMqB,MAAMK,OAAP,EAAgBJ,IAAIG,OAAJ,CAAYO,KAA5B,EAAmCV,IAAIG,OAAJ,CAAY9D,KAA/C;YAFhB;QAIF,KAAK;YACH,OAAA,SAAA,CAAA,GACK0D,OADL;gBAEEO,QAAQ5B,MAAMqB,MAAMO,MAAP,EAAeN,IAAIG,OAAJ,CAAYO,KAA3B,EAAkCV,IAAIG,OAAJ,CAAY9D,KAA9C;YAFf;QAIF,KAAK;YACH,OAAA,SAAA,CAAA,GAAY0D,OAAUC,IAAIG,OAA1B;QACF,KAAK;YACH,OAAOH,IAAIG,OAAJ,CAAYJ;QACrB,KAAK;YACH,OAAA,SAAA,CAAA,GACKA,OADL;gBAEEK,SAAShB,sBACPW,MAAMG,MADsB,EAE5B;gBAEFM,cAAc;gBACdG,aAAaZ,MAAMY,WAAN,GAAoB;YAPnC;QASF,KAAK;YACH,OAAA,SAAA,CAAA,GACKZ,OADL;gBAEES,cAAc;YAFhB;QAIF,KAAK;YACH,OAAA,SAAA,CAAA,GACKT,OADL;gBAEES,cAAc;YAFhB;QAIF;YACE,OAAOT;IAzDX;AA2DD,EAAA,kCAAA;AAGD,IAAMa,cAAqC,CAAA;AAC3C,IAAMC,eAAuC,CAAA;AAU7C,SAAgBC,UAAAA,IAAAA;qCACdC,gBAAAA,EAAAA,mBAAAA,0BAAAA,KAAAA,IAAmB,OAAA,kDACnBC,cAAAA,EAAAA,iBAAAA,wBAAAA,KAAAA,IAAiB,OAAA,iDACjBC,eAAAA,EAAAA,kBAAAA,yBAAAA,KAAAA,IAAkB,QAAA,sBAClBC,iBAAAA,KAAAA,cAAAA,+BACAC,kBAAAA,EAAAA,qBAAAA,0BAAAA,KAAAA,IAAqB,QAAA,uBACrBC,WAAAA,KAAAA,QAAAA,EACGC,OAAAA,8BAAAA,MAAAA;QAAAA;QAAAA;QAAAA;QAAAA;QAAAA;QAAAA;KAAAA;IAEH,IAAMC,QAAK,SAAA;QACTP,kBAAAA;QACAC,gBAAAA;QACAC,iBAAAA;QACAG,UAAAA;IAJS,GAKNC;IAEL,IAAME,gBAAgB7F,0NAAa4F,MAAMC,aAAnB;IACtB,IAAMC,gBAAgB9F,0NAAa4F,MAAME,aAAN,IAAuBZ;IAC1D,IAAMa,iBAAiB/F,0NAAa4F,MAAMG,cAAN,IAAwBZ;IAC5D,IAAMa,gBAAgBhG,0NAAa4F,MAAMI,aAAnB;IACtB,IAAMC,YAAYjG,0NAAsB;IACxC,IAAMkG,gBAAgBlG,0NAA4B,CAAA;IAClD,wCAAa;QACX,sDAAA;QACAA,6NAAgB;YACd,CAAA,CACE,OAAOwF,mBAAmB,WAD5B,IAAA,uCAAA/E,6KAAS,OAEP,sLAFF,KAAA,GAAA,2BAAA;QAKD,GAAE,EANH;IAOD;IAEDT,6NAAgB;QACdiG,UAAUE,OAAV,GAAoB;QAEpB,OAAO;YACLF,UAAUE,OAAV,GAAoB;QACrB;IACF,GAAE,EANH;0BAQyBnG,4NAAe,IAA/BoG,eAAAA,eAAAA,CAAAA,EAAAA;IACT,IAAMC,WAAWrG,0NAAkC;QACjDwE,QAAQoB,MAAMC,aADmC;QAEjDjB,QAAQgB,MAAME,aAAN,IAAuBZ;QAC/BR,SAASkB,MAAMG,cAAN,IAAwBZ;QACjCN,QAAQe,MAAMI,aAJmC;QAKjDlB,cAAc;QACdC,cAAc;QACdE,aAAa;IAPoC;IAUnD,IAAMZ,QAAQgC,SAASF,OAAvB;IAEA,IAAMG,WAAWtG,+NAAkB,SAACuG,MAAD;QACjC,IAAMC,OAAOH,SAASF,OAAtB;QAEAE,SAASF,OAAT,GAAmB/B,cAAcoC,MAAMD,SAAvC,iBAAA;QAGA,IAAIC,SAASH,SAASF,OAAtB,EAA+BC,aAAa,SAAAK,CAAC;YAAA,OAAIA,IAAI;QAAR;IAC9C,GAAE,EAPc;IASjB,IAAMC,qBAAqB1G,+NACzB,SAACwE,MAAD,EAAiBQ,KAAjB;QACE,OAAO,IAAI2B,QAAQ,SAACC,OAAD,EAAUC,MAAV;YACjB,IAAMC,sBAAuBlB,MAAMmB,QAAN,CAAuBvC,QAAQQ;YAC5D,IAAI8B,uBAAuB,MAAM;gBAC/B,uCAAA;gBACAF,QAAQ1B;YACT,OAAM,IAAIlD,UAAU8E,sBAAsB;gBACxCA,oBAAqC7E,IAArC,CACC,SAAA2C,MAAM;oBACJgC,QAAQhC,UAAUM;gBACnB,GACD,SAAA8B,eAAe;oBACb,wCAA2C;wBACzCC,QAAQC,IAAR,CAAA,mFAEEF;oBAEH;oBAEDH,OAAOG;gBACR;YAEJ,OAAM;gBACLJ,QAAQE;YACT;QACF;IACF,GACD;QAAClB,MAAMmB,QAAP;KA5ByB;IA+B3B;;MAGA,IAAMI,sBAAsBnH,+NAC1B,SAACwE,MAAD,EAAiBQ,KAAjB;QACE,IAAMoC,mBAAmBxB,MAAMwB,gBAA/B;QACA,IAAMC,SAAStG,WAAWqG,oBACtBA,iBAAiBpC,SACjBoC;QACJ,IAAME,UACJtC,SAASqC,OAAOE,UAAhB,GACIF,OAAOE,UAAP,CAAkBvC,OAAOR,UACzBgD,kBAAkBhD,QAAQ6C;QAChC,OAAO,IAAIV,QAAQ,SAACC,OAAD,EAAUC,MAAV;YACjBS,QAAQrF,IAAR,CACE;gBACE2E,QAAQ1B;YACT,GACD,SAACuC,GAAD;gBACE,4EAAA;gBACA,4EAAA;gBACA,0BAAA;gBACA,sGAAA;gBACA,IAAIA,IAAIC,IAAJ,KAAa,mBAAmB;oBAClCd,QAAQe,gBAAgBF;gBACzB,OAAM;oBACL,4BAAA;oBACA,wCAA2C;wBACzCR,QAAQC,IAAR,CAAA,2FAEEO;oBAEH;oBAEDZ,OAAOY;gBACR;YACF;QAEJ;IACF,GACD;QAAC7B,MAAMwB,gBAAP;KArC0B;IAwC5B,IAAMQ,gCAAgC5H,+NACpC,SAACgF,KAAD,EAAgBrE,KAAhB;QACE,OAAO,IAAIgG,QAAQ,SAAAC,OAAO;YAAA,OACxBA,QAAQV,cAAcC,OAAd,CAAsBnB,MAAtB,CAA6B+B,QAA7B,CAAsCpG;QADtB;IAG3B,GACD,EANoC;IAStC,IAAMkH,2BAA2B7H,+NAC/B,SAACwE,MAAD;QACE,IAAMsD,0BAAoCtG,OAAOuC,IAAP,CACxCmC,cAAcC,OAD0B,EAExC4B,MAFwC,CAEjC,SAAAC,CAAC;YAAA,OAAIjH,WAAWmF,cAAcC,OAAd,CAAsB6B,EAAtB,CAAyBjB,QAA1B;QAAd,IAFV,gEAAA;QAKA,IAAMkB,mBACJH,wBAAwBhH,MAAxB,GAAiC,IAC7BgH,wBAAwBI,GAAxB,CAA4B,SAAAF,CAAC;YAAA,OAC3BJ,8BAA8BI,GAAGtF,MAAM8B,QAAQwD;QADpB,KAG7B;YAACrB,QAAQC,OAAR,CAAgB;SALvB,EAAA,sBAAA;QAOA,OAAOD,QAAQwB,GAAR,CAAYF,kBAAkBhG,IAA9B,CAAmC,SAACmG,eAAD;YAAA,OACxCA,gBAAgBC,MAAhB,CAAuB,SAAC7B,IAAD,EAAO8B,IAAP,EAAaC,KAAb;gBACrB,IAAID,SAAS,mCAAmC;oBAC9C,OAAO9B;gBACR;gBACD,IAAI8B,MAAM;oBACR9B,OAAOxD,MAAMwD,MAAMsB,uBAAuB,CAACS,MAA/B,EAAuCD;gBACpD;gBACD,OAAO9B;YACR,GAAE,CAAA;QATqC;IAW3C,GACD;QAACoB;KA1B8B,GAAjC,4CAAA;IA8BA,IAAMY,oBAAoBxI,+NACxB,SAACwE,MAAD;QACE,OAAOmC,QAAQwB,GAAR,CAAY;YACjBN,yBAAyBrD;YACzBoB,MAAMwB,gBAAN,GAAyBD,oBAAoB3C,UAAU,CAAA;YACvDoB,MAAMmB,QAAN,GAAiBL,mBAAmBlC,UAAU,CAAA;SAHzC,EAIJvC,IAJI,CAIC,SAAA,KAAA;gBAAEwG,cAAAA,KAAAA,CAAAA,EAAAA,EAAaC,eAAAA,KAAAA,CAAAA,EAAAA,EAAcC,iBAAAA,KAAAA,CAAAA,EAAAA;YACnC,IAAMC,iBAAiBC,mJAAUV,GAAV,CACrB;gBAACM;gBAAaC;gBAAcC;aADP,EAErB;gBAAEG,YAAAA;YAAF;YAEF,OAAOF;QACR;IACF,GACD;QACEhD,MAAMmB,QADR;QAEEnB,MAAMwB,gBAFR;QAGES;QACAnB;QACAS;KAnBsB,GAA1B,2DAAA;IAwBA,IAAM4B,+BAA+BC,iBACnC,SAACxE,MAAD;YAACA,WAAAA,KAAAA,GAAAA;YAAAA,SAAiBH,MAAMG,MAAAA;;QACtB8B,SAAS;YAAE/B,MAAM;YAAoBE,SAAS;QAArC;QACT,OAAO+D,kBAAkBhE,QAAQvC,IAA1B,CAA+B,SAAA2G,cAAc;YAClD,IAAI,CAAC,CAAC3C,UAAUE,OAAhB,EAAyB;gBACvBG,SAAS;oBAAE/B,MAAM;oBAAoBE,SAAS;gBAArC;gBACT6B,SAAS;oBAAE/B,MAAM;oBAAcE,SAASmE;gBAA/B;YACV;YACD,OAAOA;QACR;IACF;IAGH5I,6NAAgB;QACd,IACEuF,mBACAU,UAAUE,OAAV,KAAsB,QACtBxB,6JAAQkB,cAAcM,OAAf,EAAwBP,MAAMC,aAA9B,GACP;YACAkD,6BAA6BlD,cAAcM,OAAf;QAC7B;IACF,GAAE;QAACZ;QAAiBwD;KARrB;IAUA,IAAME,YAAYjJ,+NAChB,SAACkJ,SAAD;QACE,IAAM1E,SACJ0E,aAAaA,UAAU1E,MAAvB,GACI0E,UAAU1E,MADd,GAEIqB,cAAcM,OAHpB;QAIA,IAAMvB,SACJsE,aAAaA,UAAUtE,MAAvB,GACIsE,UAAUtE,MADd,GAEIkB,cAAcK,OAAd,GACAL,cAAcK,OADd,GAEAP,MAAME,aAAN,IAAuB,CAAA;QAC7B,IAAMpB,UACJwE,aAAaA,UAAUxE,OAAvB,GACIwE,UAAUxE,OADd,GAEIqB,eAAeI,OAAf,GACAJ,eAAeI,OADf,GAEAP,MAAMG,cAAN,IAAwB,CAAA;QAC9B,IAAMlB,SACJqE,aAAaA,UAAUrE,MAAvB,GACIqE,UAAUrE,MADd,GAEImB,cAAcG,OAAd,GACAH,cAAcG,OADd,GAEAP,MAAMI,aALZ;QAMAH,cAAcM,OAAd,GAAwB3B;QACxBsB,cAAcK,OAAd,GAAwBvB;QACxBmB,eAAeI,OAAf,GAAyBzB;QACzBsB,cAAcG,OAAd,GAAwBtB;QAExB,IAAMsE,aAAa,SAAbA;YACJ7C,SAAS;gBACP/B,MAAM;gBACNE,SAAS;oBACPK,cAAc,CAAC,CAACoE,aAAa,CAAC,CAACA,UAAUpE,YADlC;oBAEPF,QAAAA;oBACAF,SAAAA;oBACAG,QAAAA;oBACAL,QAAAA;oBACAO,cAAc,CAAC,CAACmE,aAAa,CAAC,CAACA,UAAUnE,YANlC;oBAOPE,aACE,CAAC,CAACiE,aACF,CAAC,CAACA,UAAUjE,WADZ,IAEA,OAAOiE,UAAUjE,WAAjB,KAAiC,WAC7BiE,UAAUjE,WAHd,GAII;gBAZC;YAFF;QAiBV;QAED,IAAIW,MAAMwD,OAAV,EAAmB;YACjB,IAAMC,uBAAwBzD,MAAMwD,OAAN,CAC5B/E,MAAMG,MADsB,EAE5B8E;YAGF,IAAItH,UAAUqH,uBAAuB;gBAClCA,qBAAsCpH,IAAtC,CAA2CkH;YAC7C,OAAM;gBACLA;YACD;QACF,OAAM;YACLA;QACD;IACF,GACD;QAACvD,MAAME,aAAP;QAAsBF,MAAMI,aAA5B;QAA2CJ,MAAMG,cAAjD;QAAiEH,MAAMwD,OAAvE;KAhEgB;IAmElBpJ,6NAAgB;QACd,IACEiG,UAAUE,OAAV,KAAsB,QACtB,CAACxB,6JAAQkB,cAAcM,OAAf,EAAwBP,MAAMC,aAA9B,GACR;YACA,IAAIJ,oBAAoB;gBACtBI,cAAcM,OAAd,GAAwBP,MAAMC,aAA9B;gBACAoD;gBACA,IAAI1D,iBAAiB;oBACnBwD,6BAA6BlD,cAAcM,OAAf;gBAC7B;YACF;QACF;IACF,GAAE;QACDV;QACAG,MAAMC,aAFL;QAGDoD;QACA1D;QACAwD;KAlBF;IAqBA/I,6NAAgB;QACd,IACEyF,sBACAQ,UAAUE,OAAV,KAAsB,QACtB,CAACxB,6JAAQmB,cAAcK,OAAf,EAAwBP,MAAME,aAA9B,GACR;YACAA,cAAcK,OAAd,GAAwBP,MAAME,aAAN,IAAuBZ;YAC/CoB,SAAS;gBACP/B,MAAM;gBACNE,SAASmB,MAAME,aAAN,IAAuBZ;YAFzB;QAIV;IACF,GAAE;QAACO;QAAoBG,MAAME,aAA3B;KAZH;IAcA9F,6NAAgB;QACd,IACEyF,sBACAQ,UAAUE,OAAV,KAAsB,QACtB,CAACxB,6JAAQoB,eAAeI,OAAhB,EAAyBP,MAAMG,cAA/B,GACR;YACAA,eAAeI,OAAf,GAAyBP,MAAMG,cAAN,IAAwBZ;YACjDmB,SAAS;gBACP/B,MAAM;gBACNE,SAASmB,MAAMG,cAAN,IAAwBZ;YAF1B;QAIV;IACF,GAAE;QAACM;QAAoBG,MAAMG,cAA3B;KAZH;IAcA/F,6NAAgB;QACd,IACEyF,sBACAQ,UAAUE,OAAV,KAAsB,QACtB,CAACxB,6JAAQqB,cAAcG,OAAf,EAAwBP,MAAMI,aAA9B,GACR;YACAA,cAAcG,OAAd,GAAwBP,MAAMI,aAA9B;YACAM,SAAS;gBACP/B,MAAM;gBACNE,SAASmB,MAAMI,aAAAA;YAFR;QAIV;IACF,GAAE;QAACP;QAAoBG,MAAMI,aAA3B;QAA0CJ,MAAMG,cAAhD;KAZH;IAcA,IAAMwD,gBAAgBP,iBAAiB,SAACtB,IAAD;QACrC,kEAAA;QACA,yEAAA;QACA,0CAAA;QAEA,IACExB,cAAcC,OAAd,CAAsBuB,KAAtB,IACA3G,WAAWmF,cAAcC,OAAd,CAAsBuB,KAAtB,CAA4BX,QAA7B,GACV;YACA,IAAMpG,QAAQ+B,MAAM2B,MAAMG,MAAP,EAAekD;YAClC,IAAM8B,eAAetD,cAAcC,OAAd,CAAsBuB,KAAtB,CAA4BX,QAA5B,CAAqCpG;YAC1D,IAAIqB,UAAUwH,eAAe;gBAC3B,mDAAA;gBACAlD,SAAS;oBAAE/B,MAAM;oBAAoBE,SAAS;gBAArC;gBACT,OAAO+E,aACJvH,IADI,CACC,SAACwE,CAAD;oBAAA,OAAYA;gBAAZ,GACLxE,IAFI,CAEC,SAACwH,KAAD;oBACJnD,SAAS;wBACP/B,MAAM;wBACNE,SAAS;4BAAEO,OAAO0C;4BAAM/G,OAAO8I;wBAAtB;oBAFF;oBAITnD,SAAS;wBAAE/B,MAAM;wBAAoBE,SAAS;oBAArC;gBACV;YACJ,OAAM;gBACL6B,SAAS;oBACP/B,MAAM;oBACNE,SAAS;wBACPO,OAAO0C;wBACP/G,OAAO6I;oBAFA;gBAFF;gBAOT,OAAO7C,QAAQC,OAAR,CAAgB4C;YACxB;QACF,OAAM,IAAI5D,MAAMwB,gBAAV,EAA4B;YACjCd,SAAS;gBAAE/B,MAAM;gBAAoBE,SAAS;YAArC;YACT,OAAO0C,oBAAoB9C,MAAMG,MAAP,EAAekD,MACtCzF,IADI,CACC,SAACwE,CAAD;gBAAA,OAAYA;YAAZ,GACLxE,IAFI,CAEC,SAACwH,KAAD;gBACJnD,SAAS;oBACP/B,MAAM;oBACNE,SAAS;wBAAEO,OAAO0C;wBAAM/G,OAAO+B,MAAM+G,OAAO/B;oBAAnC;gBAFF;gBAITpB,SAAS;oBAAE/B,MAAM;oBAAoBE,SAAS;gBAArC;YACV;QACJ;QAED,OAAOkC,QAAQC,OAAR;IACR;IAED,IAAM8C,gBAAgB1J,+NAAkB,SAAC0H,IAAD,EAAA,KAAA;YAAiBX,WAAAA,MAAAA,QAAAA;QACvDb,cAAcC,OAAd,CAAsBuB,KAAtB,GAA8B;YAC5BX,UAAAA;QAD4B;IAG/B,GAAE,EAJmB;IAMtB,IAAM4C,kBAAkB3J,+NAAkB,SAAC0H,IAAD;QACxC,OAAOxB,cAAcC,OAAd,CAAsBuB,KAA7B;IACD,GAAE,EAFqB;IAIxB,IAAMkC,aAAaZ,iBACjB,SAACtE,OAAD,EAAiCmF,cAAjC;QACEvD,SAAS;YAAE/B,MAAM;YAAeE,SAASC;QAAhC;QACT,IAAMoF,eACJD,mBAAmB5J,YAAYqF,iBAAiBuE;QAClD,OAAOC,eACHf,6BAA6B1E,MAAMG,MAAP,IAC5BmC,QAAQC,OAAR;IACL;IAGH,IAAMmD,YAAY/J,+NAAkB,SAAC4E,MAAD;QAClC0B,SAAS;YAAE/B,MAAM;YAAcE,SAASG;QAA/B;IACV,GAAE,EAFe;IAIlB,IAAMoF,YAAYhB,iBAChB,SAACxE,MAAD,EAAuCqF,cAAvC;QACE,IAAMI,iBAAiBlJ,WAAWyD,UAAUA,OAAOH,MAAMG,MAAP,IAAiBA;QAEnE8B,SAAS;YAAE/B,MAAM;YAAcE,SAASwF;QAA/B;QACT,IAAMH,eACJD,mBAAmB5J,YAAYoF,mBAAmBwE;QACpD,OAAOC,eACHf,6BAA6BkB,kBAC7BtD,QAAQC,OAAR;IACL;IAGH,IAAMsD,gBAAgBlK,+NACpB,SAACgF,KAAD,EAAgBrE,KAAhB;QACE2F,SAAS;YACP/B,MAAM;YACNE,SAAS;gBAAEO,OAAAA;gBAAOrE,OAAAA;YAAT;QAFF;IAIV,GACD,EAPoB;IAUtB,IAAMwJ,gBAAgBnB,iBACpB,SAAChE,KAAD,EAAgBrE,KAAhB,EAA4BkJ,cAA5B;QACEvD,SAAS;YACP/B,MAAM;YACNE,SAAS;gBACPO,OAAAA;gBACArE,OAAAA;YAFO;QAFF;QAOT,IAAMmJ,eACJD,mBAAmB5J,YAAYoF,mBAAmBwE;QACpD,OAAOC,eACHf,6BAA6B/F,MAAMqB,MAAMG,MAAP,EAAeQ,OAAOrE,UACxDgG,QAAQC,OAAR;IACL;IAGH,IAAMwD,gBAAgBpK,+NACpB,SAACqK,gBAAD,EAAoDC,SAApD;QACE,gFAAA;QACA,gFAAA;QACA,wCAAA;QACA,IAAItF,QAAQsF;QACZ,IAAIrG,MAAMoG;QACV,IAAIE,QAAJ,sGAAA;QAEA,yDAAA;QACA,IAAI,CAAChJ,SAAS8I,mBAAmB;YAC/B,+BAAA;YACA,0DAAA;YACA,IAAKA,iBAAyBG,OAA9B,EAAuC;gBACpCH,iBAA4CG,OAA5C;YACF;YACD,IAAMrI,SAASkI,iBAAiBlI,MAAjB,GACVkI,iBAA4ClI,MADlC,GAEVkI,iBAA4CI,aAFjD;YAN+B,IAW7BlG,OAQEpC,OARFoC,IAX6B,EAY7BmD,OAOEvF,OAPFuF,IAZ6B,EAa7BgD,KAMEvI,OANFuI,EAb6B,EAc7B/J,QAKEwB,OALFxB,KAd6B,EAe7BgK,UAIExI,OAJFwI,OAf6B,EAgB7BC,YAGEzI,OAHFyI,SAhB6B,EAiB7BC,UAEE1I,OAFF0I,OAjB6B,EAkB7BC,WACE3I,OADF2I,QAlB6B;YAqB/B9F,QAAQsF,YAAYA,YAAY5C,OAAOA,OAAOgD;YAC9C,IAAI,CAAC1F,SAAD,oDAAA,cAAmB;gBACrB+F,2BAA2B;oBACzBC,aAAaJ;oBACbK,yBAAyB;oBACzBC,aAAa;gBAHY;YAK5B;YACDjH,MAAM,eAAekH,IAAf,CAAoB5G,QAApB,CACAgG,SAASa,WAAWzK,QAASiB,MAAM2I,UAAU,KAAKA,MADlD,IAEF,WAAWY,IAAX,CAAgB5G,MAAhB,aAAA;eACA8G,oBAAoB3I,MAAM2B,MAAMG,MAAP,EAAeQ,QAAS2F,SAAShK,SAC1DkK,WAAWC,SAAX,oBAAA;eACAQ,kBAAkBT,WAClBlK;QACL;QAED,IAAIqE,OAAO;YACT,0BAAA;YACAmF,cAAcnF,OAAOf;QACtB;IACF,GACD;QAACkG;QAAe9F,MAAMG,MAAtB;KArDoB;IAwDtB,IAAM+G,eAAevC,iBACnB,SACEwC,WADF;QAGE,IAAIjK,SAASiK,cAAc;YACzB,OAAO,SAAAC,KAAK;gBAAA,OAAIrB,cAAcqB,OAAOD;YAAzB;QACb,OAAM;YACLpB,cAAcoB;QACf;IACF;IAGH,IAAME,kBAAkB1C,iBACtB,SAAChE,KAAD,EAAgBN,OAAhB,EAAyCmF,cAAzC;YAAgBnF,YAAAA,KAAAA,GAAAA;YAAAA,UAAmB;;QACjC4B,SAAS;YACP/B,MAAM;YACNE,SAAS;gBACPO,OAAAA;gBACArE,OAAO+D;YAFA;QAFF;QAOT,IAAMoF,eACJD,mBAAmB5J,YAAYqF,iBAAiBuE;QAClD,OAAOC,eACHf,6BAA6B1E,MAAMG,MAAP,IAC5BmC,QAAQC,OAAR;IACL;IAGH,IAAM+E,cAAc3L,+NAClB,SAACyC,CAAD,EAASK,IAAT;QACE,IAAIL,EAAE+H,OAAN,EAAe;YACb/H,EAAE+H,OAAF;QACD;wBAC+B/H,EAAEN,MAAAA,EAA1BuF,OAAAA,UAAAA,IAAAA,EAAMgD,KAAAA,UAAAA,EAAAA,EAAIE,YAAAA,UAAAA,SAAAA;QAClB,IAAM5F,QAAQlC,OAAOA,OAAO4E,OAAOA,OAAOgD;QAE1C,IAAI,CAAC1F,SAAD,oDAAA,cAAmB;YACrB+F,2BAA2B;gBACzBC,aAAaJ;gBACbK,yBAAyB;gBACzBC,aAAa;YAHY;QAK5B;QAEDQ,gBAAgB1G,OAAO;IACxB,GACD;QAAC0G;KAlBiB;IAqBpB,IAAME,aAAa5C,iBACjB,SAAC6C,aAAD;QACE,IAAItK,SAASsK,gBAAgB;YAC3B,OAAO,SAAAJ,KAAK;gBAAA,OAAIE,YAAYF,OAAOI;YAAvB;QACb,OAAM;YACLF,YAAYE;QACb;IACF;IAGH,IAAMC,iBAAiB9L,+NACrB,SACE+L,SADF;QAKE,IAAIhL,WAAWgL,YAAY;YACzBzF,SAAS;gBAAE/B,MAAM;gBAAoBE,SAASsH;YAArC;QACV,OAAM;YACLzF,SAAS;gBAAE/B,MAAM;gBAAoBE,SAAS,SAAA;oBAAA,OAAMsH;gBAAN;YAArC;QACV;IACF,GACD,EAZqB;IAevB,IAAMC,YAAYhM,+NAAkB,SAAC6E,MAAD;QAClCyB,SAAS;YAAE/B,MAAM;YAAcE,SAASI;QAA/B;IACV,GAAE,EAFe;IAIlB,IAAMoH,gBAAgBjM,+NAAkB,SAAC8E,YAAD;QACtCwB,SAAS;YAAE/B,MAAM;YAAoBE,SAASK;QAArC;IACV,GAAE,EAFmB;IAItB,IAAMoH,aAAalD,iBAAiB;QAClC1C,SAAS;YAAE/B,MAAM;QAAR;QACT,OAAOwE,+BAA+B9G,IAA/B,CACL,SAAC2G,cAAD;YACE,kEAAA;YACA,oEAAA;YACA,6BAAA;YACA,oEAAA;YACA,gEAAA;YACA,mBAAA;YAEA,IAAMuD,oBAAoBvD,0BAA0BwD;YACpD,IAAMC,kBACJ,CAACF,qBAAqB3K,OAAOuC,IAAP,CAAY6E,gBAAgB9H,MAA5B,KAAuC;YAC/D,IAAIuL,iBAAiB;gBACnB,yBAAA;gBACA,EAAA;gBACA,kFAAA;gBACA,oFAAA;gBACA,+EAAA;gBACA,qFAAA;gBACA,yFAAA;gBACA,iFAAA;gBACA,uFAAA;gBACA,qDAAA;gBACA,IAAIC;gBACJ,IAAI;oBACFA,qBAAqBC,iBADnB,6DAAA;oBAGF,2BAAA;oBACA,IAAID,uBAAuBrM,WAAW;wBACpC;oBACD;gBACF,EAAC,OAAOwJ,OAAO;oBACd,MAAMA;gBACP;gBAED,OAAO9C,QAAQC,OAAR,CAAgB0F,oBACpBrK,IADI,CACC,SAAAuK,MAAM;oBACV,IAAI,CAAC,CAACvG,UAAUE,OAAhB,EAAyB;wBACvBG,SAAS;4BAAE/B,MAAM;wBAAR;oBACV;oBACD,OAAOiI;gBACR,EANI,CAAA,QAAA,CAOE,SAAAC,OAAO;oBACZ,IAAI,CAAC,CAACxG,UAAUE,OAAhB,EAAyB;wBACvBG,SAAS;4BAAE/B,MAAM;wBAAR,IADc,oDAAA;wBAGvB,8CAAA;wBACA,MAAMkI;oBACP;gBACF;YACJ,OAAM,IAAI,CAAC,CAACxG,UAAUE,OAAhB,EAAyB;gBAC9B,8DAAA;gBACAG,SAAS;oBAAE/B,MAAM;gBAAR,IAFqB,wBAAA;gBAI9B,IAAI4H,mBAAmB;oBACrB,MAAMvD;gBACP;YACF;YACD;QACD;IAEJ;IAED,IAAM8D,eAAe1D,iBACnB,SAACvG,CAAD;QACE,IAAIA,KAAKA,EAAEkK,cAAP,IAAyB5L,WAAW0B,EAAEkK,cAAH,GAAoB;YACzDlK,EAAEkK,cAAF;QACD;QAED,IAAIlK,KAAKA,EAAEmK,eAAP,IAA0B7L,WAAW0B,EAAEmK,eAAH,GAAqB;YAC3DnK,EAAEmK,eAAF;QACD,EAAA,+DAAA;QAGD,gEAAA;QACA,+DAAA;QACA,kEAAA;QACA,IAAI,oDAAA,gBAAW,OAAOtK,aAAa,aAAa;YAC9C,gDAAA;YACA,IAAMC,gBAAgBH;YACtB,IACEG,kBAAkB,QAClBA,yBAAyBsK,mBACzB;gBACA,CAAA,CACEtK,cAAcuK,UAAd,IACEvK,cAAcuK,UAAd,CAAyBC,YAAzB,CAAsC,OAF1C,IAAA,uCAAAtM,6KAAS,OAGP,oPAHF,KAAA;YAKD;QACF;QAEDyL,YAAU,CAAA,QAAV,CAAmB,SAAAc,MAAM;YACvB/F,QAAQC,IAAR,CAAA,4DAEE8F;QAEH;IACF;IAGH,IAAM1D,oBAA2C;QAC/CL,WAAAA;QACAgE,cAAclE;QACdQ,eAAAA;QACAQ,WAAAA;QACAG,eAAAA;QACAwB,iBAAAA;QACAvB,eAAAA;QACA6B,WAAAA;QACAC,eAAAA;QACArC,YAAAA;QACAI,WAAAA;QACA8B,gBAAAA;QACAI,YAAAA;IAb+C;IAgBjD,IAAMK,gBAAgBvD,iBAAiB;QACrC,OAAOtD,SAASrB,MAAMG,MAAP,EAAe8E;IAC/B;IAED,IAAM4D,cAAclE,iBAAiB,SAAAvG,CAAC;QACpC,IAAIA,KAAKA,EAAEkK,cAAP,IAAyB5L,WAAW0B,EAAEkK,cAAH,GAAoB;YACzDlK,EAAEkK,cAAF;QACD;QAED,IAAIlK,KAAKA,EAAEmK,eAAP,IAA0B7L,WAAW0B,EAAEmK,eAAH,GAAqB;YAC3DnK,EAAEmK,eAAF;QACD;QAED3D;IACD;IAED,IAAMkE,eAAenN,+NACnB,SAAC0H,IAAD;QACE,OAAO;YACL/G,OAAO+B,MAAM2B,MAAMG,MAAP,EAAekD;YAC3B+B,OAAO/G,MAAM2B,MAAMO,MAAP,EAAe8C;YAC3BhD,SAAS,CAAC,CAAChC,MAAM2B,MAAMK,OAAP,EAAgBgD;YAChC0F,cAAc1K,MAAMmD,cAAcM,OAAf,EAAwBuB;YAC3C3B,gBAAgB,CAAC,CAACrD,MAAMqD,eAAeI,OAAhB,EAAyBuB;YAChD2F,cAAc3K,MAAMoD,cAAcK,OAAf,EAAwBuB;QANtC;IAQR,GACD;QAACrD,MAAMO,MAAP;QAAeP,MAAMK,OAArB;QAA8BL,MAAMG,MAApC;KAXmB;IAcrB,IAAM8I,kBAAkBtN,+NACtB,SAAC0H,IAAD;QACE,OAAO;YACL6F,UAAU,SAAA,SAAC5M,KAAD,EAAakJ,cAAb;gBAAA,OACRM,cAAczC,MAAM/G,OAAOkJ;YADnB;YAEVD,YAAY,SAAA,WAACjJ,KAAD,EAAiBkJ,cAAjB;gBAAA,OACV6B,gBAAgBhE,MAAM/G,OAAOkJ;YADnB;YAEZ2D,UAAU,SAAA,SAAC7M,KAAD;gBAAA,OAAgBuJ,cAAcxC,MAAM/G;YAApC;QALL;IAOR,GACD;QAACwJ;QAAeuB;QAAiBxB;KAVX;IAaxB,IAAMuD,gBAAgBzN,+NACpB,SAAC0N,aAAD;QACE,IAAMC,aAAa1M,SAASyM;QAC5B,IAAMhG,OAAOiG,aACRD,cAAmChG,IADjB,GAEnBgG;QACJ,IAAME,aAAalL,MAAM2B,MAAMG,MAAP,EAAekD;QAEvC,IAAM1C,QAA8B;YAClC0C,MAAAA;YACA/G,OAAOiN;YACPC,UAAUtC;YACVuC,QAAQlC;QAJ0B;QAMpC,IAAI+B,YAAY;YAAA,IAEZpJ,OAIEmJ,cAJFnJ,IAFY,EAGLwJ,YAGLL,cAHF/M,KAHY,EAIRqN,KAEFN,cAFFO,EAJY,EAKZnD,WACE4C,cADF5C,QALY;YAQd,IAAIvG,SAAS,YAAY;gBACvB,IAAIwJ,cAAc9N,WAAW;oBAC3B+E,MAAM2F,OAAN,GAAgB,CAAC,CAACiD;gBACnB,OAAM;oBACL5I,MAAM2F,OAAN,GAAgB,CAAC,CAAA,CACf/J,MAAMC,OAAN,CAAc+M,eAAe,CAACA,WAAWM,OAAX,CAAmBH,UADlC;oBAGjB/I,MAAMrE,KAAN,GAAcoN;gBACf;YACF,OAAM,IAAIxJ,SAAS,SAAS;gBAC3BS,MAAM2F,OAAN,GAAgBiD,eAAeG;gBAC/B/I,MAAMrE,KAAN,GAAcoN;YACf,OAAM,IAAIC,OAAO,YAAYlD,UAAU;gBACtC9F,MAAMrE,KAAN,GAAcqE,MAAMrE,KAAN,IAAe,EAA7B;gBACAqE,MAAM8F,QAAN,GAAiB;YAClB;QACF;QACD,OAAO9F;IACR,GACD;QAAC4G;QAAYL;QAAclH,MAAMG,MAAjC;KAzCoB;IA4CtB,IAAM2J,QAAQnO,2NACZ;QAAA,OAAM,CAAC2E,6JAAQkB,cAAcM,OAAf,EAAwB9B,MAAMG,MAA9B;IAAd,GACA;QAACqB,cAAcM,OAAf;QAAwB9B,MAAMG,MAA9B;KAFY;IAKd,IAAM4J,UAAUpO,2NACd;QAAA,OACE,OAAOwF,mBAAmB,cACtB2I,QACE9J,MAAMO,MAAN,IAAgBpD,OAAOuC,IAAP,CAAYM,MAAMO,MAAlB,EAA0B9D,MAA1B,KAAqC,IACrD0E,mBAAmB,SAASzE,WAAWyE,kBACtCA,eAA4DI,SAC5DJ,iBACHnB,MAAMO,MAAN,IAAgBpD,OAAOuC,IAAP,CAAYM,MAAMO,MAAlB,EAA0B9D,MAA1B,KAAqC;IAP3D,GAQA;QAAC0E;QAAgB2I;QAAO9J,MAAMO,MAA9B;QAAsCgB;KATxB;IAYhB,IAAMyI,MAAG,SAAA,CAAA,GACJhK,OADI;QAEPwB,eAAeA,cAAcM,OAFtB;QAGPL,eAAeA,cAAcK,OAHtB;QAIPJ,gBAAgBA,eAAeI,OAJxB;QAKPH,eAAeA,cAAcG,OALtB;QAMPyF,YAAAA;QACAL,cAAAA;QACA2B,aAAAA;QACAR,cAAAA;QACAzD,WAAAA;QACAc,WAAAA;QACA+B,gBAAAA;QACAJ,iBAAAA;QACAvB,eAAAA;QACAD,eAAAA;QACA8B,WAAAA;QACAC,eAAAA;QACArC,YAAAA;QACAI,WAAAA;QACAkC,YAAAA;QACAe,cAAclE;QACdQ,eAAAA;QACA6E,SAAAA;QACAD,OAAAA;QACAxE,iBAAAA;QACAD,eAAAA;QACA+D,eAAAA;QACAN,cAAAA;QACAG,iBAAAA;QACAhI,gBAAAA;QACAD,kBAAAA;QACAE,iBAAAA;IAhCO;IAmCT,OAAO8I;AACR;AAED,SAAgBC,OAGd1I,KAAAA;IACA,IAAM2I,YAAYnJ,UAAkBQ;QAC5B4I,YAA0C5I,MAA1C4I,SAAAA,EAAW1M,WAA+B8D,MAA/B9D,QAAAA,EAAU2M,SAAqB7I,MAArB6I,MAAAA,EAAQC,WAAa9I,MAAb8I,QAAAA,EAAAA,gDAAAA;IAGrC1O,uOAA0B0O,UAAU;QAAA,OAAMH;IAAN;IAEpC,wCAAa;QACX,sDAAA;QACAvO,6NAAgB;YACd,CACE,CAAC4F,MAAM6I,MADT,GAAA,uCAAAhO,6KAAS,OAAA,8RAAT,KAAA,GAAA,2BAAA;QAKD,GAAE,EANH;IAOD;IACD,OACET,iOAACG,gBAAD;QAAgBQ,OAAO4N;OACpBC,YACGxO,iOAAoBwO,WAAkBD,aACtCE,SACAA,OAAOF,aACPzM,SAAQ,oCAAA;OACRf,WAAWe,YACRA,SACCyM,aAEF,CAAC1M,gBAAgBC,YACjB9B,4NAAe2O,IAAf,CAAoB7M,YACpB,OACF;AAGT;AAED,SAASiJ,2BAAT,KAAA;QACEC,cAAAA,MAAAA,WAAAA,EACAC,0BAAAA,MAAAA,uBAAAA,EACAC,cAAAA,MAAAA,WAAAA;IAMAjE,QAAQC,IAAR,CAAA,6BAC8BgE,cAD9B,+EAEIF,cAFJ,+GAGwGC,0BAHxG;AAMD;AAED;;IAGA,SAAgBtD,gBAAwBiH,QAAAA;IACtC,IAAIhK,SAA+B,CAAA;IACnC,IAAIgK,SAASC,KAAb,EAAoB;QAClB,IAAID,SAASC,KAAT,CAAe/N,MAAf,KAA0B,GAAG;YAC/B,OAAOkC,MAAM4B,QAAQgK,SAAS9L,IAAlB,EAAwB8L,SAASE,OAAjC;QACb;QACD,IAAA,IAAA,YAAgBF,SAASC,KAAzB,EAAA,WAAA,MAAA,OAAA,CAAA,YAAA,KAAA,GAAA,YAAA,WAAA,YAAA,SAAA,CAAA,OAAA,QAAA,CAAA,KAAgC;YAAA,IAAA;YAAA,IAAA,UAAA;gBAAA,IAAA,MAAA,UAAA,MAAA,EAAA;gBAAA,QAAA,SAAA,CAAA,KAAA;YAAA,OAAA;gBAAA,KAAA,UAAA,IAAA;gBAAA,IAAA,GAAA,IAAA,EAAA;gBAAA,QAAA,GAAA,KAAA;YAAA;YAAA,IAAvBpH,MAAuB;YAC9B,IAAI,CAAC/E,MAAMkC,QAAQ6C,IAAI3E,IAAb,GAAoB;gBAC5B8B,SAAS5B,MAAM4B,QAAQ6C,IAAI3E,IAAb,EAAmB2E,IAAIqH,OAAvB;YACf;QACF;IACF;IACD,OAAOlK;AACR;AAED;;IAGA,SAAgB4C,kBACdhD,MAAAA,EACA6C,MAAAA,EACA0H,IAAAA,EACAC,OAAAA;QADAD,SAAAA,KAAAA,GAAAA;QAAAA,OAAgB;;IAGhB,IAAME,mBAAiCC,yBAAyB1K;IAEhE,OAAO6C,MAAM,CAAC0H,OAAO,iBAAiB,WAA/B,CAA2CE,kBAAkB;QAClEE,YAAY;QACZH,SAASA,WAAWC;IAF8C;AAIrE;AAED;;IAGA,SAAgBC,yBACd1K,MAAAA;IAEA,IAAI4K,OAAqBxO,MAAMC,OAAN,CAAc2D,UAAU,EAAxB,GAA6B,CAAA;IACtD,IAAK,IAAIR,KAAKQ,OAAQ;QACpB,IAAIhD,OAAOC,SAAP,CAAiB4N,cAAjB,CAAgC1N,IAAhC,CAAqC6C,QAAQR,IAAI;YACnD,IAAMrB,MAAMxB,OAAO6C;YACnB,IAAIpD,MAAMC,OAAN,CAAc2D,MAAM,CAAC7B,IAArB,MAA+B,MAAM;gBACvCyM,IAAI,CAACzM,IAAL,GAAY6B,MAAM,CAAC7B,IAAP,CAAYuF,GAAZ,CAAgB,SAACvH,KAAD;oBAC1B,IAAIC,MAAMC,OAAN,CAAcF,WAAW,QAAQ2O,yJAAc3O,QAAQ;wBACzD,OAAOuO,yBAAyBvO;oBACjC,OAAM;wBACL,OAAOA,UAAU,KAAKA,QAAQV;oBAC/B;gBACF;YACF,OAAM,IAAIqP,yJAAc9K,MAAM,CAAC7B,IAAR,GAAe;gBACrCyM,IAAI,CAACzM,IAAL,GAAYuM,yBAAyB1K,MAAM,CAAC7B,IAAR;YACrC,OAAM;gBACLyM,IAAI,CAACzM,IAAL,GAAY6B,MAAM,CAAC7B,IAAP,KAAgB,KAAK6B,MAAM,CAAC7B,IAA5B,GAAmC1C;YAChD;QACF;IACF;IACD,OAAOmP;AACR;AAED;;;IAIA,SAAStG,WAAW3G,MAApB,EAAmCoN,MAAnC,EAAkD1E,OAAlD;IACE,IAAM2E,cAAcrN,OAAOqB,KAAP;IAEpB+L,OAAOE,OAAP,CAAe,SAASC,MAAMjN,CAAf,EAAuBW,CAAvB;QACb,IAAI,OAAOoM,WAAW,CAACpM,EAAnB,KAA0B,aAAa;YACzC,IAAMuM,iBAAiB9E,QAAQ3H,KAAR,KAAkB;YACzC,IAAM0M,cAAcD,kBAAkB9E,QAAQgF,iBAAR,CAA0BpN;YAChE+M,WAAW,CAACpM,EAAZ,GAAiBwM,cACb/G,mJAAUjI,MAAMC,OAAN,CAAc4B,KAAK,EAAnB,GAAwB,CAAA,GAAIA,GAAGoI,WACzCpI;QACL,OAAM,IAAIoI,QAAQgF,iBAAR,CAA0BpN,IAAI;YACvC+M,WAAW,CAACpM,EAAZ,GAAiByF,mJAAU1G,MAAM,CAACiB,EAAR,EAAYX,GAAGoI;QAC1C,OAAM,IAAI1I,OAAO+L,OAAP,CAAezL,OAAO,CAAC,GAAG;YACnC+M,YAAYM,IAAZ,CAAiBrN;QAClB;IACF;IACD,OAAO+M;AACR;AAED,4DAAA,GACA,SAASlE,kBAAkBT,OAA3B;IACE,OAAOjK,MAAMmP,IAAN,CAAWlF,SACf9C,MADI,CACG,SAAAiI,EAAE;QAAA,OAAIA,GAAGC,QAAP;IAAA,GACT/H,GAFI,CAEA,SAAA8H,EAAE;QAAA,OAAIA,GAAGrP,KAAP;IAAA;AACV;AAED,yCAAA,GACA,SAAS0K,oBACP6E,YADF,EAEEvF,OAFF,EAGEoD,SAHF;IAKE,uDAAA;IACA,IAAI,OAAOmC,iBAAiB,WAAW;QACrC,OAAOC,QAAQxF;IAChB,EAAA,mEAAA;IAGD,IAAIyF,uBAAuB,EAA3B;IACA,IAAIC,iBAAiB;IACrB,IAAI9H,QAAQ,CAAC;IAEb,IAAI,CAAC3H,MAAMC,OAAN,CAAcqP,eAAe;QAChC,kCAAA;QACA,IAAI,CAACnC,aAAaA,aAAa,UAAUA,aAAa,SAAS;YAC7D,OAAOoC,QAAQxF;QAChB;IACF,OAAM;QACL,mDAAA;QACAyF,uBAAuBF;QACvB3H,QAAQ2H,aAAahC,OAAb,CAAqBH;QAC7BsC,iBAAiB9H,SAAS;IAC3B,EAAA,mIAAA;IAGD,IAAIoC,WAAWoD,aAAa,CAACsC,gBAAgB;QAC3C,OAAOD,qBAAqBE,MAArB,CAA4BvC;IACpC,EAAA,sHAAA;IAGD,IAAI,CAACsC,gBAAgB;QACnB,OAAOD;IACR,EAAA,qGAAA;IAGD,OAAOA,qBACJ5M,KADI,CACE,GAAG+E,OACT+H,MAFI,CAEGF,qBAAqB5M,KAArB,CAA2B+E,QAAQ;AAC9C,EAAA,6EAAA;AAGD,6EAAA;AACA,kCAAA;AACA,wEAAA;AACA,IAAMgI,4BACJ,OAAOC,WAAW,eAClB,OAAOA,OAAOlO,QAAd,KAA2B,eAC3B,OAAOkO,OAAOlO,QAAP,CAAgBmO,aAAvB,KAAyC;AAI3C,SAASzH,iBAAoD0H,EAA7D;IACE,IAAMC,MAAW3Q,0NAAa0Q,KAA9B,iFAAA;IAGAH,0BAA0B;QACxBI,IAAIxK,OAAJ,GAAcuK;IACf;IAED,OAAO1Q,+NACL;QAAA,IAAA,IAAA,OAAA,UAAA,MAAA,EAAI4Q,OAAJ,IAAA,MAAA,OAAA,OAAA,GAAA,OAAA,MAAA,OAAA;YAAIA,IAAJ,CAAA,KAAA,GAAA,SAAA,CAAA,KAAA;QAAA;QAAA,OAAoBD,IAAIxK,OAAJ,CAAY0K,KAAZ,CAAkB,KAAK,GAAGD;IAA9C,GACA,EAFK;AAIR;SC7mCeE,SACdC,gBAAAA;IAEA,IAAMvQ,SAASD;QAEbkN,gBAKEjN,OALFiN,aAAAA,EACAN,eAIE3M,OAJF2M,YAAAA,EACAG,kBAGE9M,OAHF8M,eAAAA,EACA5D,gBAEElJ,OAFFkJ,aAAAA,EACAC,kBACEnJ,OADFmJ,eAAAA;IAGF,IAAMgE,aAAa1M,SAAS8P,mBAA5B,qDAAA;IAGA,IAAMnL,QAA8B+H,aAC/BoD,mBACD;QAAErJ,MAAMqJ;IAAR;QAEUC,YAAoCpL,MAA1C8B,IAAAA,EAA2BuJ,aAAerL,MAAzBmB,QAAAA;IAEzB/G,6NAAgB;QACd,IAAIgR,WAAW;YACbtH,cAAcsH,WAAW;gBACvBjK,UAAUkK;YADa;QAG1B;QACD,OAAO;YACL,IAAID,WAAW;gBACbrH,gBAAgBqH;YACjB;QACF;IACF,GAAE;QAACtH;QAAeC;QAAiBqH;QAAWC;KAX/C;IAaA,wCAAa;QACX,CACEzQ,SADF,uCAAAC,6KAAS,OAEP,uJAFF,KAAA;IAID;IAED,CACEuQ,YADF,uCAAAvQ,6KAAS,OAEP,sIAFF,KAAA;IAKA,IAAMyQ,eAAelR,2NAAc;QAAA,OAAMsN,gBAAgB0D;IAAtB,GAAkC;QACnE1D;QACA0D;KAFmB;IAKrB,OAAO;QAACvD,cAAc7H;QAAQuH,aAAa6D;QAAYE;KAAvD;AACD;AAED,SAAgBC,MAAAA,IAAAA;QACdpK,WAAAA,KAAAA,QAAAA,EACAW,OAAAA,KAAAA,IAAAA,EACA+G,SAAAA,KAAAA,MAAAA,EACA3M,WAAAA,KAAAA,QAAAA,EACIkM,KAAAA,KAAJC,EAAAA,EACAO,YAAAA,KAAAA,SAAAA,EACA4C,YAAAA,KAAAA,SAAAA,EACGxL,QAAAA,8BAAAA,MAAAA;QAAAA;QAAAA;QAAAA;QAAAA;QAAAA;QAAAA;QAAAA;KAAAA;4BAOCrF,oBAJQ8Q,SAGP7Q,8BAAAA,mBAAAA;QAAAA;QAAAA;KAAAA;IAGL,wCAAa;QACX,sDAAA;QACAR,6NAAgB;YACd,CACE,CAACyO,SADH,uCAAAhO,6KAAS,OAAA,0LAEgLiH,OAFhL,8DAE8OA,OAF9O,sFAAT,KAAA;YAKA,CACE,CAAA,CAAEsG,MAAMlM,YAAYf,WAAWe,SAA/B,IADF,uCAAArB,6KAAS,OAEP,wKAFF,KAAA;YAKA,CACE,CAAA,CAAE+N,aAAa1M,YAAYf,WAAWe,SAAtC,IADF,uCAAArB,6KAAS,OAEP,sLAFF,KAAA;YAKA,CACE,CAAA,CAAEgO,UAAU3M,YAAY,CAACD,gBAAgBC,SAAzC,IADF,uCAAArB,6KAAS,OAEP,mKAFF,KAAA,GAAA,2BAAA;QAKD,GAAE,EArBH;IAsBD,EAAA,iEAAA;QAGOiJ,gBAAmClJ,OAAnCkJ,aAAAA,EAAeC,kBAAoBnJ,OAApBmJ,eAAAA;IACvB3J,6NAAgB;QACd0J,cAAchC,MAAM;YAClBX,UAAUA;QADQ;QAGpB,OAAO;YACL4C,gBAAgBjC;QACjB;IACF,GAAE;QAACgC;QAAeC;QAAiBjC;QAAMX;KAP1C;IAQA,IAAM/B,QAAQxE,OAAOiN,aAAP,CAAA,SAAA;QAAuB/F,MAAAA;IAAvB,GAAgC9B;IAC9C,IAAM0L,OAAO9Q,OAAO2M,YAAP,CAAoBzF;IACjC,IAAM6J,YAAY;QAAEvM,OAAAA;QAAOwM,MAAMhR;IAAf;IAElB,IAAIiO,QAAQ;QACV,OAAOA,OAAM,SAAA,CAAA,GAAM8C,WAAN;YAAiBD,MAAAA;QAAjB;IACd;IAED,IAAIvQ,WAAWe,WAAW;QACxB,OAAOA,SAAQ,SAAA,CAAA,GAAMyP,WAAN;YAAiBD,MAAAA;QAAjB;IAChB;IAED,IAAI9C,WAAW;QACb,mEAAA;QACA,IAAI,OAAOA,cAAc,UAAU;YAAA,IACzBE,WAAsB9I,MAAtB8I,QADyB,EACZ/I,OADY,8BACHC,OADG;gBAAA;aAAA;YAEjC,OAAO5F,iOACLwO,WADK,SAAA;gBAEHmC,KAAKjC;YAFF,GAEe1J,OAAUW,MAFzB;gBAE+ByL,WAAAA;YAF/B,IAGLtP;QAEH,EATY,4CAAA;QAWb,OAAO9B,iOACLwO,WADK,SAAA;YAEHxJ,OAAAA;YAAOwM,MAAMhR;QAFV,GAEqBoF,OAFrB;YAE4BwL,WAAAA;QAF5B,IAGLtP;IAEH,EAAA,2EAAA;IAGD,IAAM2P,YAAYzD,MAAM;IAExB,IAAI,OAAOyD,cAAc,UAAU;QAAA,IACzB/C,YAAsB9I,MAAtB8I,QADyB,EACZ/I,QADY,8BACHC,OADG;YAAA;SAAA;QAEjC,OAAO5F,iOACLyR,WADK,SAAA;YAEHd,KAAKjC;QAFF,GAEe1J,OAAUW,OAFzB;YAE+ByL,WAAAA;QAF/B,IAGLtP;IAEH;IAED,OAAO9B,iOAAoByR,WAApB,SAAA,CAAA,GAAoCzM,OAAUY,OAA9C;QAAqDwL,WAAAA;IAArD,IAAkEtP;AAC1E;IC1NY4P,OAAI,WAAA,GAAG1R,8NAClB,SAAC4F,KAAD,EAAyB+K,GAAzB;IACE,8FAAA;IACA,4FAAA;QACQpK,SAAoBX,MAApBW,MAAAA,EAAWZ,OAAAA,8BAASC,OAAAA;QAAAA;KAAAA;IAC5B,IAAM+L,UAAUpL,UAAH,OAAGA,SAAU;4BACYhG,oBAA9B2M,cAAAA,kBAAAA,WAAAA,EAAaR,eAAAA,kBAAAA,YAAAA;IACrB,OACE1M,iOAAA,QAAA,SAAA;QACE0F,UAAUgH;QACViE,KAAKA;QACLvH,SAAS8D;QACT3G,QAAQoL;IAJV,GAKMhM;AAGT;AAGH+L,KAAKxR,WAAL,GAAmB;AC4DnB;;IAGA,SAAgB0R,WAAAA,IAAAA;qCAKdC,gBAAAA,EAAAA,mBAAAA,0BAAAA,KAAAA,IAAmB,SAACC,YAAD;QACjB,IAAI7N,MAAc,CAAA;QAClB,IAAK,IAAID,KAAK8N,aAAc;YAC1B,IACEA,aAAazC,cAAb,CAA4BrL,MAC5B,OAAO8N,YAAY,CAAC9N,EAApB,KAA2B,YAC3B;gBACA,uBAAA;gBACCC,GAAW,CAACD,EAAZ,GAAiB8N,YAAY,CAAC9N,EAA9B;YACF;QACF;QACD,OAAOC;IACR,IAAA,uBACE8N,SAAAA,8BAAAA,MAAAA;QAAAA;KAAAA;IAKH,OAAO,SAASC,aACdC,WADK;QAGL,IAAMC,uBACJD,YAAU/R,WAAV,IACA+R,YAAUvK,IADV,IAECuK,YAAUE,WAAV,IAAyBF,YAAUE,WAAV,CAAsBzK,IAFhD,IAGA;QACF;;;YAIM0K,IAAAA,WAAAA,GAAAA,SAAAA,gBAAAA;;;;;;;;;;sBAGJrL,QAAAA,GAAW,SAACvC,MAAD;oBACT,OAAOuN,OAAOhL,QAAP,CAAiBvC,QAAQ,MAAKoB,KAA9B;gBACR;sBAEDwB,gBAAAA,GAAmB;oBACjB,OAAOrG,WAAWgR,OAAO3K,gBAAR,IACb2K,OAAO3K,gBAAP,CAAyB,MAAKxB,KAA9B,IACAmM,OAAO3K,gBAFX;gBAGD;sBAEDsF,YAAAA,GAAe,SAAClI,MAAD,EAAiB6N,OAAjB;oBACb,OAAON,OAAOrF,YAAP,CAAoBlI,QAApB,SAAA,CAAA,GACF6N,SADE;wBAELzM,OAAO,MAAKA,KAAAA;oBAFP;gBAIR;sBAKD0M,mBAAAA,GAAsB,SAACC,WAAD;oBACpB,OAAOvS,iOAACiS,aAAD,SAAA,CAAA,GAAe,MAAKrM,KAApB,EAA+B2M;gBACvC;;;;mBAED9D,MAAAA,GAAA,SAAA;kCACiC,IAAA,CAAK7I,KAAAA,EAA5B9D,QAAa8D,8BAAAA,aAAAA;oBAAAA;iBAAAA;gBACrB,OACE5F,iOAACsO,QAAD,SAAA,CAAA,GACM1I,OACAmM,QAFN;oBAGEhL,UAAUgL,OAAOhL,QAAP,IAAmB,IAAA,CAAKA,QAHpC;oBAIEK,kBAAkB2K,OAAO3K,gBAAP,IAA2B,IAAA,CAAKA,gBAJpD;oBAKEvB,eAAegM,iBAAiB,IAAA,CAAKjM,KAAN;oBAC/BI,eACE+L,OAAOS,gBAAP,IAA2BT,OAAOS,gBAAP,CAAwB,IAAA,CAAK5M,KAA7B;oBAE7BE,eACEiM,OAAOU,gBAAP,IAA2BV,OAAOU,gBAAP,CAAwB,IAAA,CAAK7M,KAA7B;oBAE7BG,gBACEgM,OAAOW,iBAAP,IAA4BX,OAAOW,iBAAP,CAAyB,IAAA,CAAK9M,KAA9B;oBAE9BF,UAAU,IAAA,CAAKgH,YAfjB;oBAgBE5K,UAAU,IAAA,CAAKwQ,mBAAAA;gBAhBjB;YAmBH;;;QAjDGF,EACGlS,WAAAA,GAAAA,gBAA4BgS,uBAAAA;QAmDrC,OAAOS,+MACLP,GACAH,YAFyB,4CAAA;;IAI5B;AACF;ACrLD;;;IAIA,SAAgBW,QACdC,IAAAA;IAEA,IAAMT,IAA0B,SAA1BA,EAA0BxM,KAAK;QAAA,OACnC5F,iOAACK,gBAAD,MACG,SAAAG,MAAM;YACL,CACE,CAAC,CAACA,SADJ,uCAAAC,6KAAS,OAAA,yMAEgMoS,KAAKnL,IAFrM,2CAAT,KAAA;YAIA,OAAO1H,iOAAC6S,MAAD,SAAA,CAAA,GAAUjN,OAAV;gBAAiBpF,QAAQA;YAAzB;QACR;IARgC;IAYrC,IAAM0R,uBACJW,KAAK3S,WAAL,IACA2S,KAAKnL,IADL,IAECmL,KAAKV,WAAL,IAAoBU,KAAKV,WAAL,CAAiBzK,IAFtC,IAGA,aAJF,kFAAA;IAOA,gEAAA;IACC0K,EAEEU,gBAFF,GAEqBD;IAEtBT,EAAElS,WAAF,GAAA,mBAAiCgS,uBAAjC;IAEA,OAAOS,+MACLP,GACAS,KAFyB,4CAAA;;AAM5B;ACmBD;;IAGA,IAAaE,OAAO,SAAPA,KAAYC,KAAL,EAAiBjD,IAAjB,EAA+BkD,EAA/B;IAClB,IAAMC,OAAOC,cAAcH;IAC3B,IAAMrS,QAAQuS,IAAI,CAACnD,KAAnB;IACAmD,KAAKE,MAAL,CAAYrD,MAAM;IAClBmD,KAAKE,MAAL,CAAYH,IAAI,GAAGtS;IACnB,OAAOuS;AACR;AAED,IAAaG,OAAO,SAAPA,KACXC,SADkB,EAElBC,MAFkB,EAGlBC,MAHkB;IAKlB,IAAMN,OAAOC,cAAcG;IAC3B,IAAMG,IAAIP,IAAI,CAACK,OAAf;IACAL,IAAI,CAACK,OAAL,GAAeL,IAAI,CAACM,OAApB;IACAN,IAAI,CAACM,OAAL,GAAeC;IACf,OAAOP;AACR;AAED,IAAaQ,SAAS,SAATA,OACXJ,SADoB,EAEpB/K,KAFoB,EAGpB5H,KAHoB;IAKpB,IAAMuS,OAAOC,cAAcG;IAC3BJ,KAAKE,MAAL,CAAY7K,OAAO,GAAG5H;IACtB,OAAOuS;AACR;AAED,IAAaS,UAAU,SAAVA,QACXL,SADqB,EAErB/K,KAFqB,EAGrB5H,KAHqB;IAKrB,IAAMuS,OAAOC,cAAcG;IAC3BJ,IAAI,CAAC3K,MAAL,GAAc5H;IACd,OAAOuS;AACR;AAED,IAAMC,gBAAgB,SAAhBA,cAAiBG,SAAD;IACpB,IAAI,CAACA,WAAW;QACd,OAAO,EAAP;IACD,OAAM,IAAI1S,MAAMC,OAAN,CAAcyS,YAAY;QACnC,OAAA,EAAA,CAAA,MAAA,CAAWA;IACZ,OAAM;QACL,IAAMM,WAAWpS,OAAOuC,IAAP,CAAYuP,WAC1BpL,GADc,CACV,SAAAvF,GAAG;YAAA,OAAIkR,SAASlR;QAAb,GACP0F,MAFc,CAEP,SAACyL,GAAD,EAAM9D,EAAN;YAAA,OAAcA,KAAK8D,MAAM9D,KAAK8D;QAA9B,GAAoC;QAC9C,OAAOlT,MAAMmP,IAAN,CAAA,SAAA,CAAA,GAAgBuD,WAAhB;YAA2BxS,QAAQ8S,WAAW;QAA9C;IACR;AACF;AAED,IAAMG,0BAA0B,SAA1BA,wBACJC,UAD8B,EAE9BC,eAF8B;IAI9B,IAAMvD,KAAK,OAAOsD,eAAe,aAAaA,aAAaC;IAE3D,OAAO,SAAC7E,IAAD;QACL,IAAIxO,MAAMC,OAAN,CAAcuO,SAASnO,SAASmO,OAAO;YACzC,IAAMlM,QAAQiQ,cAAc/D;YAC5B,OAAOsB,GAAGxN;QACX,EAAA,+CAAA;QAGD,4CAAA;QACA,OAAOkM;IACR;AACF;IAEK8E,kBAAAA,WAAAA,GAAAA,SAAAA,gBAAAA;;IAQJ,SAAA,gBAAYtO,KAAZ;;QACE,QAAA,iBAAA,IAAA,CAAA,IAAA,EAAMA,UAAN,IAAA,EAAA,8EAAA;QAEA,qBAAA;cAoBFuO,gBAAAA,GAAmB,SACjBzD,EADiB,EAEjB0D,YAFiB,EAGjBC,WAHiB;8BASb,MAAKzO,KAAAA,EAHP8B,OAAAA,YAAAA,IAAAA,EAEUoE,iBAAAA,YAAVtL,MAAAA,CAAUsL,cAAAA;YAGZA,eAAe,SAACwI,SAAD;gBACb,IAAIC,eAAeR,wBAAwBM,aAAa3D;gBACxD,IAAI8D,gBAAgBT,wBAAwBK,cAAc1D,KAA1D,sEAAA;gBAGA,6CAAA;gBACA,IAAIlM,SAASxB,MACXsR,UAAU9P,MADM,EAEhBkD,MACAgJ,GAAGhO,MAAM4R,UAAU9P,MAAX,EAAmBkD;gBAG7B,IAAI+M,aAAaJ,cACbE,aAAa7R,MAAM4R,UAAU1P,MAAX,EAAmB8C,SACrCzH;gBACJ,IAAIyU,eAAeN,eACfI,cAAc9R,MAAM4R,UAAU5P,OAAX,EAAoBgD,SACvCzH;gBAEJ,IAAIS,aAAa+T,aAAa;oBAC5BA,aAAaxU;gBACd;gBACD,IAAIS,aAAagU,eAAe;oBAC9BA,eAAezU;gBAChB;gBAED,OAAA,SAAA,CAAA,GACKqU,WADL;oBAEE9P,QAAAA;oBACAI,QAAQyP,cACJrR,MAAMsR,UAAU1P,MAAX,EAAmB8C,MAAM+M,cAC9BH,UAAU1P,MALhB;oBAMEF,SAAS0P,eACLpR,MAAMsR,UAAU5P,OAAX,EAAoBgD,MAAMgN,gBAC/BJ,UAAU5P,OAAAA;gBARhB;YAUD;QACF;cAEDoL,IAAAA,GAAO,SAACnP,KAAD;YAAA,OACL,MAAKwT,gBAAL,CACE,SAACb,SAAD;gBAAA,OAAA,EAAA,CAAA,MAAA,CACKH,cAAcG,YADnB;oBAEEqB,qJAAUhU;iBAFZ;YAAA,GAIA,OACA;QAPG;cAUPiU,UAAAA,GAAa,SAACjU,KAAD;YAAA,OAAgB;gBAAA,OAAM,MAAKmP,IAAL,CAAUnP;YAAhB;QAAhB;cAEb0S,IAAAA,GAAO,SAACE,MAAD,EAAiBC,MAAjB;YAAA,OACL,MAAKW,gBAAL,CACE,SAACnB,KAAD;gBAAA,OAAkBK,KAAKL,OAAOO,QAAQC;YAAtC,GACA,MACA;QAJG;cAOPqB,UAAAA,GAAa,SAACtB,MAAD,EAAiBC,MAAjB;YAAA,OAAoC;gBAAA,OAC/C,MAAKH,IAAL,CAAUE,QAAQC;YAD6B;QAApC;cAGbT,IAAAA,GAAO,SAAChD,IAAD,EAAekD,EAAf;YAAA,OACL,MAAKkB,gBAAL,CAAsB,SAACnB,KAAD;gBAAA,OAAkBD,KAAKC,OAAOjD,MAAMkD;YAApC,GAAyC,MAAM;QADhE;cAGP6B,UAAAA,GAAa,SAAC/E,IAAD,EAAekD,EAAf;YAAA,OAA8B;gBAAA,OAAM,MAAKF,IAAL,CAAUhD,MAAMkD;YAAtB;QAA9B;cAEbS,MAAAA,GAAS,SAACnL,KAAD,EAAgB5H,KAAhB;YAAA,OACP,MAAKwT,gBAAL,CACE,SAACnB,KAAD;gBAAA,OAAkBU,OAAOV,OAAOzK,OAAO5H;YAAvC,GACA,SAACqS,KAAD;gBAAA,OAAkBU,OAAOV,OAAOzK,OAAO;YAAvC,GACA,SAACyK,KAAD;gBAAA,OAAkBU,OAAOV,OAAOzK,OAAO;YAAvC;QAJK;cAOTwM,YAAAA,GAAe,SAACxM,KAAD,EAAgB5H,KAAhB;YAAA,OAA+B;gBAAA,OAAM,MAAK+S,MAAL,CAAYnL,OAAO5H;YAAzB;QAA/B;cAEfgT,OAAAA,GAAU,SAACpL,KAAD,EAAgB5H,KAAhB;YAAA,OACR,MAAKwT,gBAAL,CACE,SAACnB,KAAD;gBAAA,OAAkBW,QAAQX,OAAOzK,OAAO5H;YAAxC,GACA,OACA;QAJM;cAOVqU,aAAAA,GAAgB,SAACzM,KAAD,EAAgB5H,KAAhB;YAAA,OAA+B;gBAAA,OAC7C,MAAKgT,OAAL,CAAapL,OAAO5H;YADyB;QAA/B;cAGhBsU,OAAAA,GAAU,SAACtU,KAAD;YACR,IAAIG,SAAS,CAAC;YACd,MAAKqT,gBAAL,CACE,SAACnB,KAAD;gBACE,IAAMkC,MAAMlC,QAAK;oBAAIrS;iBAAJ,CAAA,MAAA,CAAcqS,SAAS;oBAACrS;iBAAzC;gBAEAG,SAASoU,IAAIpU,MAAb;gBAEA,OAAOoU;YACR,GACD,SAAClC,KAAD;gBACE,OAAOA,QAAK;oBAAI;iBAAJ,CAAA,MAAA,CAAaA,SAAS;oBAAC;iBAAnC;YACD,GACD,SAACA,KAAD;gBACE,OAAOA,QAAK;oBAAI;iBAAJ,CAAA,MAAA,CAAaA,SAAS;oBAAC;iBAAnC;YACD;YAGH,OAAOlS;QACR;cAEDqU,aAAAA,GAAgB,SAACxU,KAAD;YAAA,OAAgB;gBAAA,OAAM,MAAKsU,OAAL,CAAatU;YAAnB;QAAhB;cA6BhByU,YAAAA,GAAe,SAAC7M,KAAD;YAAA,OAAmB;gBAAA,OAAM,MAAK8M,MAAL,CAAiB9M;YAAvB;QAAnB;cAqBf+M,SAAAA,GAAY;YAAA,OAAM;gBAAA,OAAM,MAAKC,GAAL;YAAN;QAAN;QA1LV,MAAKF,MAAL,GAAc,MAAKA,MAAL,CAAYG,IAAZ,CAAA,uBAAA;QACd,MAAKD,GAAL,GAAW,MAAKA,GAAL,CAASC,IAAT,CAAA,uBAAA;;IACZ;;WAEDC,kBAAAA,GAAA,SAAA,mBACEC,SADF;QAGE,IACE,IAAA,CAAK9P,KAAL,CAAWP,gBAAX,IACA,IAAA,CAAKO,KAAL,CAAWpF,MAAX,CAAkB6E,gBADlB,IAEA,CAACV,6JACCjC,MAAMgT,UAAUlV,MAAV,CAAiBgE,MAAlB,EAA0BkR,UAAUhO,IAApC,GACLhF,MAAM,IAAA,CAAKkD,KAAL,CAAWpF,MAAX,CAAkBgE,MAAnB,EAA2B,IAAA,CAAKoB,KAAL,CAAW8B,IAAtC,IAEP;YACA,IAAA,CAAK9B,KAAL,CAAWpF,MAAX,CAAkByM,YAAlB,CAA+B,IAAA,CAAKrH,KAAL,CAAWpF,MAAX,CAAkBgE,MAAjD;QACD;IACF;WAyHD6Q,MAAAA,GAAA,SAAA,OAAU9M,KAAV;QACE,gFAAA;QACA,IAAIiE;QACJ,IAAA,CAAK2H,gBAAL,CAEE,SAACnB,KAAD;YACE,IAAME,OAAOF,QAAQG,cAAcH,SAAS,EAA5C;YACA,IAAI,CAACxG,QAAQ;gBACXA,SAAS0G,IAAI,CAAC3K,MAAd;YACD;YACD,IAAIxH,WAAWmS,KAAKE,MAAN,GAAe;gBAC3BF,KAAKE,MAAL,CAAY7K,OAAO;YACpB,EAAA,+EAAA;YAED,OAAOxH,WAAWmS,KAAKyC,KAAN,IACbzC,KAAKyC,KAAL,CAAW,SAAAC,CAAC;gBAAA,OAAIA,MAAM3V;YAAV,KACV,EADF,GAEEiT,OACFA;QACL,GACD,MACA;QAGF,OAAO1G;IACR;WAID+I,GAAAA,GAAA,SAAA;QACE,wDAAA;QACA,IAAI/I;QACJ,IAAA,CAAK2H,gBAAL,CAEE,SAACnB,KAAD;YACE,IAAM6C,MAAM7C,MAAMxP,KAAN;YACZ,IAAI,CAACgJ,QAAQ;gBACXA,SAASqJ,OAAOA,IAAIN,GAAX,IAAkBM,IAAIN,GAAJ;YAC5B;YACD,OAAOM;QACR,GACD,MACA;QAGF,OAAOrJ;IACR;WAIDiC,MAAAA,GAAA,SAAA;QACE,IAAMqH,eAA6B;YACjChG,MAAM,IAAA,CAAKA,IADsB;YAEjCyF,KAAK,IAAA,CAAKA,GAFuB;YAGjClC,MAAM,IAAA,CAAKA,IAHsB;YAIjCN,MAAM,IAAA,CAAKA,IAJsB;YAKjCW,QAAQ,IAAA,CAAKA,MALoB;YAMjCC,SAAS,IAAA,CAAKA,OANmB;YAOjCsB,SAAS,IAAA,CAAKA,OAPmB;YAQjCI,QAAQ,IAAA,CAAKA,MARoB;YASjCT,YAAY,IAAA,CAAKA,UATgB;YAUjCU,WAAW,IAAA,CAAKA,SAViB;YAWjCT,YAAY,IAAA,CAAKA,UAXgB;YAYjCC,YAAY,IAAA,CAAKA,UAZgB;YAajCC,cAAc,IAAA,CAAKA,YAbc;YAcjCC,eAAe,IAAA,CAAKA,aAda;YAejCG,eAAe,IAAA,CAAKA,aAfa;YAgBjCC,cAAc,IAAA,CAAKA,YAAAA;QAhBc;2BA6B/B,IAAA,CAAKxP,KAAAA,EATP4I,YAAAA,aAAAA,SAAAA,EACAC,SAAAA,aAAAA,MAAAA,EACA3M,WAAAA,aAAAA,QAAAA,EACA4F,OAAAA,aAAAA,IAAAA,qCACAlH,MAAAA,EACY6Q,eAEP0E,8BAAAA,qBAAAA;YAAAA;YAAAA;SAAAA;QAIP,IAAMnQ,QAAK,SAAA,CAAA,GACNkQ,cADM;YAETtE,MAAMuE;YACNrO,MAAAA;QAHS;QAMX,OAAO8G,YACHxO,iOAAoBwO,WAAkB5I,SACtC6I,SACCA,OAAe7I,SAChB9D,SAAQ,oCAAA;WACR,OAAOA,aAAa,aACjBA,SAAiB8D,SAClB,CAAC/D,gBAAgBC,YACjB9B,4NAAe2O,IAAf,CAAoB7M,YACpB,OACF;IACL;;;AAzPGoS,gBAIG8B,YAAAA,GAAe;IACpB3Q,kBAAkB;AADE;AAwPxB,IAAa4Q,aAAU,WAAA,GAAGrD,QAA+BsB;ICzXnDgC,mBAAAA,WAAAA,GAAAA,SAAAA,gBAAAA;;;;;;WAGJC,qBAAAA,GAAA,SAAA,sBACEvQ,KADF;QAGE,IACElD,MAAM,IAAA,CAAKkD,KAAL,CAAWpF,MAAX,CAAkBoE,MAAnB,EAA2B,IAAA,CAAKgB,KAAL,CAAW8B,IAAtC,MACHhF,MAAMkD,MAAMpF,MAAN,CAAaoE,MAAd,EAAsB,IAAA,CAAKgB,KAAL,CAAW8B,IAAjC,KACPhF,MAAM,IAAA,CAAKkD,KAAL,CAAWpF,MAAX,CAAkBkE,OAAnB,EAA4B,IAAA,CAAKkB,KAAL,CAAW8B,IAAvC,MACHhF,MAAMkD,MAAMpF,MAAN,CAAakE,OAAd,EAAuB,IAAA,CAAKkB,KAAL,CAAW8B,IAAlC,KACPlG,OAAOuC,IAAP,CAAY,IAAA,CAAK6B,KAAjB,EAAwB9E,MAAxB,KAAmCU,OAAOuC,IAAP,CAAY6B,OAAO9E,MALxD,EAME;YACA,OAAO;QACR,OAAM;YACL,OAAO;QACR;IACF;WAED2N,MAAAA,GAAA,SAAA;0BAC+D,IAAA,CAAK7I,KAAAA,EAA5D4I,YAAAA,YAAAA,SAAAA,EAAWhO,SAAAA,YAAAA,MAAAA,EAAQiO,SAAAA,YAAAA,MAAAA,EAAQ3M,WAAAA,YAAAA,QAAAA,EAAU4F,OAAAA,YAAAA,IAAAA,EAAS/B,OAAAA,8BAAAA,aAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;SAAAA;QAEpD,IAAMyQ,QAAQ1T,MAAMlC,OAAOkE,OAAR,EAAiBgD;QACpC,IAAM+B,QAAQ/G,MAAMlC,OAAOoE,MAAR,EAAgB8C;QAEnC,OAAO,CAAC,CAAC0O,SAAS,CAAC,CAAC3M,QAChBgF,SACE1N,WAAW0N,UACTA,OAAOhF,SACP,OACF3H,WACAf,WAAWe,YACTA,SAAS2H,SACT,OACF+E,YACAxO,iOAAoBwO,WAAW7I,MAAa8D,SAC5CA,QACF;IACL;;;AAGH,IAAa4M,eAAY,WAAA,GAAGzD,QAG1BsD;ACpBF;;;QAIMI,iBAAAA,WAAAA,GAAAA,SAAAA,gBAAAA;;IAIJ,SAAA,eAAY1Q,KAAZ;;QACE,QAAA,iBAAA,IAAA,CAAA,IAAA,EAAMA,UAAN,IAAA;YACQ6I,SAA8C7I,MAA9C6I,MAAAA,EAAQ3M,WAAsC8D,MAAtC9D,QAAAA,EAAU0M,YAA4B5I,MAA5B4I,SAAAA,EAAeR,KAAapI,MAAjBqI,EAAAA,EAAQvG,OAAS9B,MAAT8B,IAAAA;QAC7C,CACE,CAAC+G,SADH,uCAAAhO,6KAAS,OAAA,4GAEmGiH,OAFnG,kFAAT,KAAA;QAIA,CACE,CAAA,CAAE8G,aAAaC,MAAf,IADF,uCAAAhO,6KAAS,OAEP,qLAFF,KAAA;QAKA,CACE,CAAA,CAAEuN,MAAMlM,YAAYf,WAAWe,SAA/B,IADF,uCAAArB,6KAAS,OAEP,wLAFF,KAAA;QAKA,CACE,CAAA,CAAE+N,aAAa1M,YAAYf,WAAWe,SAAtC,IADF,uCAAArB,6KAAS,OAEP,sMAFF,KAAA;QAKA,CACE,CAAA,CAAEgO,UAAU3M,YAAY,CAACD,gBAAgBC,SAAzC,IADF,uCAAArB,6KAAS,OAEP,mLAFF,KAAA;;IAID;;WAED0V,qBAAAA,GAAA,SAAA,sBAAsBvQ,KAAtB;QACE,IAAI,IAAA,CAAKA,KAAL,CAAW2Q,YAAf,EAA6B;YAC3B,OAAO,IAAA,CAAK3Q,KAAL,CAAW2Q,YAAX,CAAwB3Q,OAAO,IAAA,CAAKA,KAApC;QACR,OAAM,IACLA,MAAM8B,IAAN,KAAe,IAAA,CAAK9B,KAAL,CAAW8B,IAA1B,IACAhF,MAAMkD,MAAMpF,MAAN,CAAagE,MAAd,EAAsB,IAAA,CAAKoB,KAAL,CAAW8B,IAAjC,MACHhF,MAAM,IAAA,CAAKkD,KAAL,CAAWpF,MAAX,CAAkBgE,MAAnB,EAA2B,IAAA,CAAKoB,KAAL,CAAW8B,IAAtC,KACPhF,MAAMkD,MAAMpF,MAAN,CAAaoE,MAAd,EAAsB,IAAA,CAAKgB,KAAL,CAAW8B,IAAjC,MACHhF,MAAM,IAAA,CAAKkD,KAAL,CAAWpF,MAAX,CAAkBoE,MAAnB,EAA2B,IAAA,CAAKgB,KAAL,CAAW8B,IAAtC,KACPhF,MAAMkD,MAAMpF,MAAN,CAAakE,OAAd,EAAuB,IAAA,CAAKkB,KAAL,CAAW8B,IAAlC,MACHhF,MAAM,IAAA,CAAKkD,KAAL,CAAWpF,MAAX,CAAkBkE,OAAnB,EAA4B,IAAA,CAAKkB,KAAL,CAAW8B,IAAvC,KACPlG,OAAOuC,IAAP,CAAY,IAAA,CAAK6B,KAAjB,EAAwB9E,MAAxB,KAAmCU,OAAOuC,IAAP,CAAY6B,OAAO9E,MAPtD,IAQA8E,MAAMpF,MAAN,CAAasE,YAAb,KAA8B,IAAA,CAAKc,KAAL,CAAWpF,MAAX,CAAkBsE,YAT3C,EAUL;YACA,OAAO;QACR,OAAM;YACL,OAAO;QACR;IACF;WAED0R,iBAAAA,GAAA,SAAA;QACE,uEAAA;QACA,wDAAA;QACA,IAAA,CAAK5Q,KAAL,CAAWpF,MAAX,CAAkBkJ,aAAlB,CAAgC,IAAA,CAAK9D,KAAL,CAAW8B,IAA3C,EAAiD;YAC/CX,UAAU,IAAA,CAAKnB,KAAL,CAAWmB,QAAAA;QAD0B;IAGlD;WAED0O,kBAAAA,GAAA,SAAA,mBAAmBC,SAAnB;QACE,IAAI,IAAA,CAAK9P,KAAL,CAAW8B,IAAX,KAAoBgO,UAAUhO,IAAlC,EAAwC;YACtC,IAAA,CAAK9B,KAAL,CAAWpF,MAAX,CAAkBmJ,eAAlB,CAAkC+L,UAAUhO,IAA5C;YACA,IAAA,CAAK9B,KAAL,CAAWpF,MAAX,CAAkBkJ,aAAlB,CAAgC,IAAA,CAAK9D,KAAL,CAAW8B,IAA3C,EAAiD;gBAC/CX,UAAU,IAAA,CAAKnB,KAAL,CAAWmB,QAAAA;YAD0B;QAGlD;QAED,IAAI,IAAA,CAAKnB,KAAL,CAAWmB,QAAX,KAAwB2O,UAAU3O,QAAtC,EAAgD;YAC9C,IAAA,CAAKnB,KAAL,CAAWpF,MAAX,CAAkBkJ,aAAlB,CAAgC,IAAA,CAAK9D,KAAL,CAAW8B,IAA3C,EAAiD;gBAC/CX,UAAU,IAAA,CAAKnB,KAAL,CAAWmB,QAAAA;YAD0B;QAGlD;IACF;WAED0P,oBAAAA,GAAA,SAAA;QACE,IAAA,CAAK7Q,KAAL,CAAWpF,MAAX,CAAkBmJ,eAAlB,CAAkC,IAAA,CAAK/D,KAAL,CAAW8B,IAA7C;IACD;WAED+G,MAAAA,GAAA,SAAA;0BAWM,IAAA,CAAK7I,KAAAA,EATPmB,OACAW,YAAAA,IAAAA,EACA+G,SAAAA,YAAAA,MAAAA,EACIT,KAAAA,YAAJC,EAAAA,EACAnM,WAAAA,YAAAA,QAAAA,EACA0M,YAAAA,YAAAA,SAAAA,EACA+H,SACA/V,YAAAA,MAAAA,EACGoF,QAAAA,8BAAAA,aAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;YAAAA;SAAAA;YAMAmQ,eAAAA,8BACDvV,QAAAA;YAAAA;YAAAA;SAAAA;QACJ,IAAMwE,QAAQxE,OAAOiN,aAAP,CAAA,SAAA;YAAuB/F,MAAAA;QAAvB,GAAgC9B;QAC9C,IAAM0L,OAAO;YACX3Q,OAAO+B,MAAMlC,OAAOgE,MAAR,EAAgBkD;YAC5B+B,OAAO/G,MAAMlC,OAAOoE,MAAR,EAAgB8C;YAC5BhD,SAAS,CAAC,CAAChC,MAAMlC,OAAOkE,OAAR,EAAiBgD;YACjC0F,cAAc1K,MAAMlC,OAAOqF,aAAR,EAAuB6B;YAC1C3B,gBAAgB,CAAC,CAACrD,MAAMlC,OAAOuF,cAAR,EAAwB2B;YAC/C2F,cAAc3K,MAAMlC,OAAOsF,aAAR,EAAuB4B;QAN/B;QASb,IAAMgP,MAAM;YAAE1R,OAAAA;YAAOsM,MAAAA;YAAME,MAAMuE;QAArB;QAEZ,IAAItH,QAAQ;YACV,OAAQA,OAAeiI;QACxB;QAED,IAAI3V,WAAWe,WAAW;YACxB,OAAQA,SAA6D4U;QACtE;QAED,IAAIlI,WAAW;YACb,mEAAA;YACA,IAAI,OAAOA,cAAc,UAAU;gBAAA,IACzBE,WAAsB9I,MAAtB8I,QADyB,EACZ/I,OADY,8BACHC,OADG;oBAAA;iBAAA;gBAEjC,OAAO5F,iOACLwO,WADK,SAAA;oBAEHmC,KAAKjC;gBAFF,GAEe1J,OAAWW,OAC/B7D;YAEH,EATY,4CAAA;YAWb,OAAO9B,iOACLwO,WADK,SAAA;gBAEHxJ,OAAAA;gBAAOwM,MAAMhR;YAFV,GAEqBoF,QAC1B9D;QAEH,EAAA,2EAAA;QAGD,IAAM2P,YAAYzD,MAAM;QAExB,IAAI,OAAOyD,cAAc,UAAU;YAAA,IACzB/C,YAAsB9I,MAAtB8I,QADyB,EACZ/I,QADY,8BACHC,OADG;gBAAA;aAAA;YAEjC,OAAO5F,iOACLyR,WADK,SAAA;gBAEHd,KAAKjC;YAFF,GAEe1J,OAAWW,QAC/B7D;QAEH;QAED,OAAO9B,iOACLyR,WADK,SAAA,CAAA,GAEAzM,OAAUY,QACf9D;IAEH;;;AAGH,IAAa6U,YAAS,WAAA,GAAG/D,QAAuC0D"}},
    {"offset": {"line": 1822, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}